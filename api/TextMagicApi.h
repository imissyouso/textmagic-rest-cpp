/**
 * TextMagic API Documentation
 * # Overview ## Introduction test <img style=\"float: right; margin-left: 10px; width: 100px;\" src=\"images/phone.png\"> TextMagic SMS API is a platform for building your own messaging app using our messaging infrastructure. It allows you to send and receive SMS text messages, query information about inbound and outbound messages, manage contacts, create templates (i.e. message formats and static texts) and schedule recurrent SMS messages as well as process bulk SMS messages. <button name=\"button\" onclick=\"http://www.google.com\" class=\"btn\">Try TextMagic API for Free</button>  ### Two Ways to Use TextMagic API * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’s messaging gateway features * [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/) – set up two-way SMS communication without the need to write any additional code  ### Code Libraries We have created a set of client libraries for the most popular programming languages (such as REST API Java and REST API PHP). These libraries allow you to integrate our API into your code in minutes. Just choose your preferred language to get started:  ## Getting started Get Started with the TextMagic REST API To start sending text messages using the TextMagic REST API, just follow these steps: 1. Generate the API credentials 1. Connect to our API endpoint This page provides all the information you need to get started. Here, we explain the following steps:  How to obtain the API credentials The API endpoint How the REST API works The next step How to obtain the API credentials  ### How to obtain the API credentials To start sending text messages, you need to create an API key. API keys are similar to an account password; the difference is that an API key only provides access to the API: you cannot log in to TextMagic Online using the API key.  Your program sends the login credentials with each API request as HTTP headers: `X-TM-Username` is your TextMagic username, while `X-TM-Key` is your API key.  How to obtain an API key:  1. Log in to TextMagic (or start a free trial if you haven’t registered yet). 1. Go to the API settings page. 1. Click the Add new API key button. 1. Enter an app name for this key. Note, it’s just a label, so pick any name. 1. Click Generate new key. 1. You should now see your new API key in the green notification banner above the table:  ![alt text](images/credentials.png)  > Note for API v1 users > V1 keys are not compatible with the V2 version of the TextMagic REST API, so you will need to generate a new API key to use the V2 endpoint.  ### The API endpoint The TextMagic REST API endpoint is: ``` https://rest.textmagic.com/api/v2 ``` All the URLs referenced in this documentation should use this base URL.  ### How the REST API works REST APIs use the HTTP protocol to send and receive messages. REST messages are usually encoded as JSON documents and are an improvement over older methods such as the XML based SOAP protocol. REST APIs use the same set of methods that web browsers use: POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read, update and delete. Often, REST URIs provide direct CRUD access to entities or collections of entities, for example: http://api.foo.com/people. In this instance, to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}. REST makes these types of operations simple.  > Example > > Let’s take the entity most often used in messaging: contacts. Imagine you want to perform operations on your contacts list: well, it’s only a matter of calling the following endpoints: > * GET /api/v2/contacts (get all of your contacts) > * GET /api/v2/contacts/{id} (get a specific contact) > * POST /api/v2/contacts (create a new contact) > * PUT /api/v2/contacts/{id} (update an existing contact) > * DELETE /api/v2/contacts/{id} (delete an existing contact) It’s that simple! In fact, that’s all you need to do to manage the contacts in your TextMagic account!  ## Sandbox Sandbox is a tool to test TextMagic REST API requests without the need to install any applications or write any code. Here, we explain the following details about Sandbox: * The credentials area * Command documentation * How it works  <a href=\"\">Go to TextMagic Sandbox</a>  ### The credentials area To make requests using your TextMagic account, you need to enter your account username and your API key into the corresponding fields. You may also Save them in your browser or press Clear to erase them.  ![alt text](images/sandbox.png) 
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * TextMagicApi.h
 *
 * 
 */

#ifndef COM_TEXTMAGIC_CLIENT_API_TextMagicApi_H_
#define COM_TEXTMAGIC_CLIENT_API_TextMagicApi_H_


#include "../ApiClient.h"

#include "AssignContactsToListInputObject.h"
#include "BadRequestResponse.h"
#include "BlockContactInputObject.h"
#include "BulkSession.h"
#include "BuyDedicatedNumberInputObject.h"
#include "Chat.h"
#include "CheckPhoneVerificationCodeInputObject.h"
#include "ClearAndAssignContactsToListInputObject.h"
#include "CloseChatsBulkInputObject.h"
#include "Contact.h"
#include "ContactNote.h"
#include "Country.h"
#include "CreateContactInputObject.h"
#include "CreateContactNoteInputObject.h"
#include "CreateCustomFieldInputObject.h"
#include "CreateListInputObject.h"
#include "CreatePushTokenInputObject.h"
#include "CreateSurveyInputObject.h"
#include "CreateSurveyNodeInputObject.h"
#include "CreateTemplateInputObject.h"
#include "DeleteChatMessagesBulkInputObject.h"
#include "DeleteChatsBulkInputObject.h"
#include "DeleteContacsFromListObject.h"
#include "DeleteContactNotesBulkInputObject.h"
#include "DeleteContactsByIdsInputObject.h"
#include "DeleteInboundMessagesBulkInputObject.h"
#include "DeleteListContactsBulkInputObject.h"
#include "DeleteListsBulkInputObject.h"
#include "DeleteMessageSessionsBulkInputObject.h"
#include "DeleteOutboundMessagesBulkInputObject.h"
#include "DeleteScheduledMessagesBulkInputObject.h"
#include "DeleteTemplatesBulkInputObject.h"
#include "DoAuthInputObject.h"
#include "DoAuthResponse.h"
#include "DoCarrierLookupResponse.h"
#include "DoEmailLookupResponse.h"
#include "GetAllBulkSessionsResponse.h"
#include "GetAllChatsResponse.h"
#include "GetAllInboundMessagesResponse.h"
#include "GetAllMessageSessionsResponse.h"
#include "GetAllOutboundMessagesResponse.h"
#include "GetAllScheduledMessagesResponse.h"
#include "GetAllTemplatesResponse.h"
#include "GetAvailableDedicatedNumbersResponse.h"
#include "GetAvailableSenderSettingOptionsResponse.h"
#include "GetBalanceNotificationOptionsResponse.h"
#include "GetBalanceNotificationSettingsResponse.h"
#include "GetBlockedContactsResponse.h"
#include "GetCallbackSettingsResponse.h"
#include "GetChatMessagesResponse.h"
#include "GetContactImportSessionProgressResponse.h"
#include "GetContactNotesResponse.h"
#include "GetContactsAutocompleteResponse.h"
#include "GetContactsByListIdResponse.h"
#include "GetContactsResponse.h"
#include "GetCustomFieldsResponse.h"
#include "GetFavouritesResponse.h"
#include "GetForwardedCallsResponse.h"
#include "GetInboundMessagesNotificationSettingsResponse.h"
#include "GetInvoicesResponse.h"
#include "GetListContactsIdsResponse.h"
#include "GetListsOfContactResponse.h"
#include "GetMessagePreviewResponse.h"
#include "GetMessagePriceResponse.h"
#include "GetMessagePricesResponse.h"
#include "GetMessageSessionStatResponse.h"
#include "GetMessagesBySessionIdResponse.h"
#include "GetMessagingCountersResponse.h"
#include "GetMessagingStatResponse.h"
#include "GetOutboundMessagesHistoryResponse.h"
#include "GetPushTokensResponse.h"
#include "GetSenderIdsResponse.h"
#include "GetSenderSettingsResponse.h"
#include "GetSpendingStatResponse.h"
#include "GetStateResponse.h"
#include "GetSubaccountsWithTokensInputObject.h"
#include "GetSubaccountsWithTokensResponse.h"
#include "GetSurveyNodesResponse.h"
#include "GetSurveysResponse.h"
#include "GetUnreadMessagesTotalResponse.h"
#include "GetUnsubscribersResponse.h"
#include "GetUserDedicatedNumbersResponse.h"
#include "GetUserListsResponse.h"
#include "GetVersionsResponse.h"
#include "Group.h"
#include "HttpContent.h"
#include "InviteSubaccountInputObject.h"
#include "MarkChatsReadBulkInputObject.h"
#include "MarkChatsUnreadBulkInputObject.h"
#include "MergeSurveyNodesInputObject.h"
#include "MessageIn.h"
#include "MessageOut.h"
#include "MessageSession.h"
#include "MessageTemplate.h"
#include "MessagesIcs.h"
#include "MuteChatInputObject.h"
#include "MuteChatsBulkInputObject.h"
#include "NotFoundResponse.h"
#include "Object.h"
#include "PingResponse.h"
#include "ReopenChatsBulkInputObject.h"
#include "RequestNewSubaccountTokenInputObject.h"
#include "RequestSenderIdInputObject.h"
#include "ResourceLinkResponse.h"
#include "SearchChatsByIdsResponse.h"
#include "SearchChatsByReceipentResponse.h"
#include "SearchChatsResponse.h"
#include "SearchContactsResponse.h"
#include "SearchInboundMessagesResponse.h"
#include "SearchListsResponse.h"
#include "SearchOutboundMessagesResponse.h"
#include "SearchScheduledMessagesResponse.h"
#include "SearchTemplatesResponse.h"
#include "SendMessageInputObject.h"
#include "SendMessageResponse.h"
#include "SenderId.h"
#include "SetChatStatusInputObject.h"
#include "Survey.h"
#include "SurveyNode.h"
#include "UnauthorizedResponse.h"
#include "UnblockContactInputObject.h"
#include "UnblockContactsBulkInputObject.h"
#include "UnmuteChatsBulkInputObject.h"
#include "UnsubscribeContactInputObject.h"
#include "UnsubscribedContact.h"
#include "UpdateBalanceNotificationSettingsInputObject.h"
#include "UpdateCallbackSettingsInputObject.h"
#include "UpdateChatDesktopNotificationSettingsInputObject.h"
#include "UpdateContactInputObject.h"
#include "UpdateContactNoteInputObject.h"
#include "UpdateCurrentUserInputObject.h"
#include "UpdateCurrentUserResponse.h"
#include "UpdateCustomFieldInputObject.h"
#include "UpdateCustomFieldValueInputObject.h"
#include "UpdateInboundMessagesNotificationSettingsInputObject.h"
#include "UpdateListObject.h"
#include "UpdatePasswordInputObject.h"
#include "UpdateSenderSettingInputObject.h"
#include "UpdateSurveyInputObject.h"
#include "UpdateSurveyNodeInputObject.h"
#include "UpdateTemplateInputObject.h"
#include "UploadMessageAttachmentResponse.h"
#include "User.h"
#include "UserCustomField.h"
#include "UsersInbound.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace com {
namespace textmagic {
namespace client {
namespace api {

using namespace com::textmagic::client::model;

class  TextMagicApi
{
public:
    TextMagicApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~TextMagicApi();
    /// <summary>
    /// Assign contacts to the specified list.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="assignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> assignContactsToList(
        std::shared_ptr<AssignContactsToListInputObject> assignContactsToListInputObject,
        int32_t id
    );
    /// <summary>
    /// Block contact from inbound and outbound communication by phone number.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="blockContactInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> blockContact(
        std::shared_ptr<BlockContactInputObject> blockContactInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Buy a dedicated number and assign it to the specified account.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyDedicatedNumberInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> buyDedicatedNumber(
        std::shared_ptr<BuyDedicatedNumberInputObject> buyDedicatedNumberInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Cancel a survey.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> cancelSurvey(
        int32_t id
    );
    /// <summary>
    /// Check user phone verification code
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="checkPhoneVerificationCodeInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> checkPhoneVerificationCode(
        std::shared_ptr<CheckPhoneVerificationCodeInputObject> checkPhoneVerificationCodeInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Reset list members to the specified contacts.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="clearAndAssignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> clearAndAssignContactsToList(
        std::shared_ptr<ClearAndAssignContactsToListInputObject> clearAndAssignContactsToListInputObject,
        int32_t id
    );
    /// <summary>
    /// Close chats by chat ids or close all chats
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="closeChatsBulkInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> closeChatsBulk(
        std::shared_ptr<CloseChatsBulkInputObject> closeChatsBulkInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Close all chats that have no unread messages.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<void> closeReadChats(
    );
    /// <summary>
    /// Close subaccount.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> closeSubaccount(
        int32_t id
    );
    /// <summary>
    /// Create a new contact from the submitted data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createContactInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> createContact(
        std::shared_ptr<CreateContactInputObject> createContactInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Create a new contact note.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createContactNoteInputObject"></param>
    /// <param name="id"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> createContactNote(
        std::shared_ptr<CreateContactNoteInputObject> createContactNoteInputObject,
        int32_t id,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Create a new custom field from the submitted data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createCustomFieldInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> createCustomField(
        std::shared_ptr<CreateCustomFieldInputObject> createCustomFieldInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Create a new list from the submitted data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createListInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> createList(
        std::shared_ptr<CreateListInputObject> createListInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Add or update a device token.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createPushTokenInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> createPushToken(
        std::shared_ptr<CreatePushTokenInputObject> createPushTokenInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Create a new survey from the submitted data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createSurveyInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> createSurvey(
        std::shared_ptr<CreateSurveyInputObject> createSurveyInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Create a new node from the submitted data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createSurveyNodeInputObject"></param>
    /// <param name="id"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> createSurveyNode(
        std::shared_ptr<CreateSurveyNodeInputObject> createSurveyNodeInputObject,
        int32_t id,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Create a new template from the submitted data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createTemplateInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> createTemplate(
        std::shared_ptr<CreateTemplateInputObject> createTemplateInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Delete all contacts.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<void> deleteAllContacts(
    );
    /// <summary>
    /// Delete all messages
    /// </summary>
    /// <remarks>
    /// Delete all messages.
    /// </remarks>
    pplx::task<void> deleteAllOutboundMessages(
    );
    /// <summary>
    /// Delete an avatar for the current user.\\
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<void> deleteAvatar(
    );
    /// <summary>
    /// Delete messages from chat by given messages ID(s).
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="deleteChatMessagesBulkInputObject"></param>
    /// <param name="id"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> deleteChatMessages(
        std::shared_ptr<DeleteChatMessagesBulkInputObject> deleteChatMessagesBulkInputObject,
        int32_t id,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Delete chats by given ID(s) or delete all chats.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="deleteChatsBulkInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> deleteChatsBulk(
        std::shared_ptr<DeleteChatsBulkInputObject> deleteChatsBulkInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Delete a single contact.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteContact(
        int32_t id
    );
    /// <summary>
    /// Delete an avatar for the contact.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteContactAvatar(
        int32_t id
    );
    /// <summary>
    /// Delete a single contact note.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteContactNote(
        int32_t id
    );
    /// <summary>
    /// Delete contact note by given ID(s) or delete all contact notes.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="deleteContactNotesBulkInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> deleteContactNotesBulk(
        int32_t id,
        std::shared_ptr<DeleteContactNotesBulkInputObject> deleteContactNotesBulkInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Delete contact by given ID(s) or delete all contacts.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="deleteContactsByIdsInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> deleteContactsByIds(
        std::shared_ptr<DeleteContactsByIdsInputObject> deleteContactsByIdsInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Unassign contacts from the specified list.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="deleteContacsFromListObject">Contact ID(s), separated by comma</param>
    /// <param name="id"></param>
    pplx::task<void> deleteContactsFromList(
        std::shared_ptr<DeleteContacsFromListObject> deleteContacsFromListObject,
        int32_t id
    );
    /// <summary>
    /// Delete a single custom field.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteCustomField(
        int32_t id
    );
    /// <summary>
    /// Cancel dedicated number subscription.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteDedicatedNumber(
        int32_t id
    );
    /// <summary>
    /// Delete the incoming message.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteInboundMessage(
        int32_t id
    );
    /// <summary>
    /// Delete inbound messages by given ID(s) or delete all inbound messages.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="deleteInboundMessagesBulkInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> deleteInboundMessagesBulk(
        std::shared_ptr<DeleteInboundMessagesBulkInputObject> deleteInboundMessagesBulkInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Delete a single list.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteList(
        int32_t id
    );
    /// <summary>
    /// Delete an avatar for the list.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteListAvatar(
        int32_t id
    );
    /// <summary>
    /// Delete contact from list by given ID(s) or all contacts from list.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="deleteListContactsBulkInputObject"></param>
    /// <param name="id"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> deleteListContactsBulk(
        std::shared_ptr<DeleteListContactsBulkInputObject> deleteListContactsBulkInputObject,
        int32_t id,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Delete list by given ID(s) or delete all lists.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="deleteListsBulkInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> deleteListsBulk(
        std::shared_ptr<DeleteListsBulkInputObject> deleteListsBulkInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Delete a message session, together with all nested messages.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteMessageSession(
        int32_t id
    );
    /// <summary>
    /// Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="deleteMessageSessionsBulkInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> deleteMessageSessionsBulk(
        std::shared_ptr<DeleteMessageSessionsBulkInputObject> deleteMessageSessionsBulkInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Delete message
    /// </summary>
    /// <remarks>
    /// Delete a single message.
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteOutboundMessage(
        int32_t id
    );
    /// <summary>
    /// Delete messages by IDs
    /// </summary>
    /// <remarks>
    /// Delete outbound messages by given ID(s) or delete all outbound messages.
    /// </remarks>
    /// <param name="deleteOutboundMessagesBulkInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> deleteOutboundMessagesBulk(
        std::shared_ptr<DeleteOutboundMessagesBulkInputObject> deleteOutboundMessagesBulkInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Delete a push notification device token.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="type"></param>
    /// <param name="deviceId"></param>
    pplx::task<void> deletePushToken(
        utility::string_t type,
        int32_t deviceId
    );
    /// <summary>
    /// Delete a message session, together with all nested messages.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteScheduledMessage(
        int32_t id
    );
    /// <summary>
    /// Delete scheduled messages by given ID(s) or delete all scheduled messages.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="deleteScheduledMessagesBulkInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> deleteScheduledMessagesBulk(
        std::shared_ptr<DeleteScheduledMessagesBulkInputObject> deleteScheduledMessagesBulkInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Delete a Sender ID.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteSenderId(
        int32_t id
    );
    /// <summary>
    /// Delete a survey.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteSurvey(
        int32_t id
    );
    /// <summary>
    /// Delete a node.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteSurveyNode(
        int32_t id
    );
    /// <summary>
    /// Delete a single template.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteTemplate(
        int32_t id
    );
    /// <summary>
    /// Delete template by given ID(s) or delete all templates.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="deleteTemplatesBulkInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> deleteTemplatesBulk(
        std::shared_ptr<DeleteTemplatesBulkInputObject> deleteTemplatesBulkInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Authenticate user by given username and password.
    /// </summary>
    /// <remarks>
    /// Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
    /// </remarks>
    /// <param name="doAuthInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<DoAuthResponse>> doAuth(
        std::shared_ptr<DoAuthInputObject> doAuthInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Carrier Lookup
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="phone"></param>
    /// <param name="country">Country code for local formatted numbers (optional, default to US)</param>
    pplx::task<std::shared_ptr<DoCarrierLookupResponse>> doCarrierLookup(
        utility::string_t phone,
        boost::optional<utility::string_t> country
    );
    /// <summary>
    /// Validate Email address using Email Lookup tool
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="email"></param>
    pplx::task<std::shared_ptr<DoEmailLookupResponse>> doEmailLookup(
        utility::string_t email
    );
    /// <summary>
    /// Duplicate a survey.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> duplicateSurvey(
        int32_t id
    );
    /// <summary>
    /// Get all bulk sending sessions.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    pplx::task<std::shared_ptr<GetAllBulkSessionsResponse>> getAllBulkSessions(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Get all user chats.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)</param>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
    /// <param name="flat">Should additional contact info be included (optional, default to 0)</param>
    pplx::task<std::shared_ptr<GetAllChatsResponse>> getAllChats(
        boost::optional<utility::string_t> status,
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> orderBy,
        boost::optional<int32_t> voice,
        boost::optional<int32_t> flat
    );
    /// <summary>
    /// Get all inbox messages.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    pplx::task<std::shared_ptr<GetAllInboundMessagesResponse>> getAllInboundMessages(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction
    );
    /// <summary>
    /// Get all message sending sessions.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    pplx::task<std::shared_ptr<GetAllMessageSessionsResponse>> getAllMessageSessions(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Get all messages
    /// </summary>
    /// <remarks>
    /// Get all user oubound messages.
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
    pplx::task<std::shared_ptr<GetAllOutboundMessagesResponse>> getAllOutboundMessages(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<int32_t> lastId
    );
    /// <summary>
    /// Get all scheduled messages.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    pplx::task<std::shared_ptr<GetAllScheduledMessagesResponse>> getAllScheduledMessages(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> status,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction
    );
    /// <summary>
    /// Get all user templates.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional)</param>
    /// <param name="limit">How many results to return (optional)</param>
    pplx::task<std::shared_ptr<GetAllTemplatesResponse>> getAllTemplates(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Find available dedicated numbers to buy.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="country">Dedicated number country. Two letters in upper case</param>
    /// <param name="prefix">Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore. (optional, default to 1)</param>
    /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). Default is false. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<GetAvailableDedicatedNumbersResponse>> getAvailableDedicatedNumbers(
        utility::string_t country,
        boost::optional<int32_t> prefix,
        boost::optional<int32_t> tollfree
    );
    /// <summary>
    /// Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="country">Return sender setting options available in specific country only. Two upper case characters (optional)</param>
    pplx::task<std::shared_ptr<GetAvailableSenderSettingOptionsResponse>> getAvailableSenderSettingOptions(
        boost::optional<utility::string_t> country
    );
    /// <summary>
    /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<GetBalanceNotificationOptionsResponse>> getBalanceNotificationOptions(
    );
    /// <summary>
    /// Get balance notification settings
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<GetBalanceNotificationSettingsResponse>> getBalanceNotificationSettings(
    );
    /// <summary>
    /// Get blocked contacts.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="query">Find blocked contacts by specified search query (optional)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    pplx::task<std::shared_ptr<GetBlockedContactsResponse>> getBlockedContacts(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> query,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction
    );
    /// <summary>
    /// Get bulk message session status.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<BulkSession>> getBulkSession(
        int32_t id
    );
    /// <summary>
    /// Fetch callback URL settings
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<GetCallbackSettingsResponse>> getCallbackSettings(
    );
    /// <summary>
    /// Check pricing for a inbound/outbound call.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::map<utility::string_t, std::shared_ptr<Object>>> getCallsPrices(
    );
    /// <summary>
    /// Get a single chat.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<Chat>> getChat(
        int32_t id
    );
    /// <summary>
    /// Find chats by phone.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="phone"></param>
    /// <param name="upsert">Create a new chat if not found (optional, default to 0)</param>
    /// <param name="reopen">Reopen chat if found or do not change status (optional, default to 0)</param>
    pplx::task<std::shared_ptr<Chat>> getChatByPhone(
        utility::string_t phone,
        boost::optional<int32_t> upsert,
        boost::optional<int32_t> reopen
    );
    /// <summary>
    /// Fetch messages from chat with specified chat id.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="query">Find messages by specified search query (optional)</param>
    /// <param name="start">Return messages since specified timestamp only (optional)</param>
    /// <param name="end">Return messages up to specified timestamp only (optional)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
    pplx::task<std::shared_ptr<GetChatMessagesResponse>> getChatMessages(
        int32_t id,
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> query,
        boost::optional<int32_t> start,
        boost::optional<int32_t> end,
        boost::optional<utility::string_t> direction,
        boost::optional<int32_t> voice
    );
    /// <summary>
    /// Get a single contact.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The contact id</param>
    pplx::task<std::shared_ptr<Contact>> getContact(
        int32_t id
    );
    /// <summary>
    /// Get a single contact by phone number.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="phone"></param>
    pplx::task<std::shared_ptr<Contact>> getContactByPhone(
        utility::string_t phone
    );
    /// <summary>
    /// Check is that phone number blocked
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="phone">Phone number to check</param>
    pplx::task<std::shared_ptr<Contact>> getContactIfBlocked(
        utility::string_t phone
    );
    /// <summary>
    /// Get contact import session progress.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<GetContactImportSessionProgressResponse>> getContactImportSessionProgress(
        int32_t id
    );
    /// <summary>
    /// Get a single contact note.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ContactNote>> getContactNote(
        int32_t id
    );
    /// <summary>
    /// Fetch notes assigned to the given contact.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    pplx::task<std::shared_ptr<GetContactNotesResponse>> getContactNotes(
        int32_t id,
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Get all user contacts.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    pplx::task<std::shared_ptr<GetContactsResponse>> getContacts(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<int32_t> shared,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction
    );
    /// <summary>
    /// Get contacts autocomplete suggestions by given search term.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="query">Find recipients by specified search query</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="lists">Should lists be returned or not (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<GetContactsAutocompleteResponse>>> getContactsAutocomplete(
        utility::string_t query,
        boost::optional<int32_t> limit,
        boost::optional<int32_t> lists
    );
    /// <summary>
    /// Fetch user contacts by given group id.
    /// </summary>
    /// <remarks>
    /// A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
    /// </remarks>
    /// <param name="id">Given group Id.</param>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    pplx::task<std::shared_ptr<GetContactsByListIdResponse>> getContactsByListId(
        int32_t id,
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction
    );
    /// <summary>
    /// Return list of countries.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Country>>> getCountries(
    );
    /// <summary>
    /// Get current user info.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<User>> getCurrentUser(
    );
    /// <summary>
    /// Get a single custom field.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<UserCustomField>> getCustomField(
        int32_t id
    );
    /// <summary>
    /// Get all contact custom fields.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    pplx::task<std::shared_ptr<GetCustomFieldsResponse>> getCustomFields(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Get a single dedicated number.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<UsersInbound>> getDedicatedNumber(
        int32_t id
    );
    /// <summary>
    /// Get an array of all rules that are disallowed to the current account.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::vector<utility::string_t>> getDisallowedRules(
    );
    /// <summary>
    /// Get favorite contacts and lists.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="query">Find contacts or lists by specified search query (optional, default to A)</param>
    pplx::task<std::shared_ptr<GetFavouritesResponse>> getFavourites(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> query
    );
    /// <summary>
    /// Get all forwarded calls.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    pplx::task<std::shared_ptr<GetForwardedCallsResponse>> getForwardedCalls(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Get a single inbox message.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<MessageIn>> getInboundMessage(
        int32_t id
    );
    /// <summary>
    /// Get inbound messages notification settings
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<GetInboundMessagesNotificationSettingsResponse>> getInboundMessagesNotificationSettings(
    );
    /// <summary>
    /// Return account invoices.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    pplx::task<std::shared_ptr<GetInvoicesResponse>> getInvoices(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Get a single list.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<Group>> getList(
        int32_t id
    );
    /// <summary>
    /// Fetch all contacts IDs belonging to the list with ID.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<GetListContactsIdsResponse>> getListContactsIds(
        int32_t id
    );
    /// <summary>
    /// Return lists which contact belongs to.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    pplx::task<std::shared_ptr<GetListsOfContactResponse>> getListsOfContact(
        int32_t id,
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Preview message
    /// </summary>
    /// <remarks>
    /// Get messages preview (with tags merged) up to 100 messages per session.
    /// </remarks>
    /// <param name="text">Message text. Required if template_id is not set (optional)</param>
    /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
    /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
    /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
    /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
    /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
    /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
    /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
    /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
    /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
    /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
    /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
    /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
    /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
    /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
    /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
    /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
    pplx::task<std::shared_ptr<GetMessagePreviewResponse>> getMessagePreview(
        boost::optional<utility::string_t> text,
        boost::optional<int32_t> templateId,
        boost::optional<int32_t> sendingTime,
        boost::optional<utility::string_t> sendingDateTime,
        boost::optional<utility::string_t> sendingTimezone,
        boost::optional<utility::string_t> contacts,
        boost::optional<utility::string_t> lists,
        boost::optional<utility::string_t> phones,
        boost::optional<int32_t> cutExtra,
        boost::optional<int32_t> partsCount,
        boost::optional<int32_t> referenceId,
        boost::optional<utility::string_t> from,
        boost::optional<utility::string_t> rule,
        boost::optional<int32_t> createChat,
        boost::optional<int32_t> tts,
        boost::optional<int32_t> local,
        boost::optional<utility::string_t> localCountry
    );
    /// <summary>
    /// Check price
    /// </summary>
    /// <remarks>
    /// Check pricing for a new outbound message.
    /// </remarks>
    /// <param name="includeBlocked">Should we show pricing for the blocked contacts. (optional, default to 0)</param>
    /// <param name="text">Message text. Required if template_id is not set (optional)</param>
    /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
    /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
    /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
    /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
    /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
    /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
    /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
    /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
    /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
    /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
    /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
    /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
    /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
    /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
    /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
    /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
    pplx::task<std::shared_ptr<GetMessagePriceResponse>> getMessagePrice(
        boost::optional<int32_t> includeBlocked,
        boost::optional<utility::string_t> text,
        boost::optional<int32_t> templateId,
        boost::optional<int32_t> sendingTime,
        boost::optional<utility::string_t> sendingDateTime,
        boost::optional<utility::string_t> sendingTimezone,
        boost::optional<utility::string_t> contacts,
        boost::optional<utility::string_t> lists,
        boost::optional<utility::string_t> phones,
        boost::optional<int32_t> cutExtra,
        boost::optional<int32_t> partsCount,
        boost::optional<int32_t> referenceId,
        boost::optional<utility::string_t> from,
        boost::optional<utility::string_t> rule,
        boost::optional<int32_t> createChat,
        boost::optional<int32_t> tts,
        boost::optional<int32_t> local,
        boost::optional<utility::string_t> localCountry
    );
    /// <summary>
    /// Get pricing
    /// </summary>
    /// <remarks>
    /// Get message prices for all countries.
    /// </remarks>
    pplx::task<std::shared_ptr<GetMessagePricesResponse>> getMessagePrices(
    );
    /// <summary>
    /// Get a message session.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<MessageSession>> getMessageSession(
        int32_t id
    );
    /// <summary>
    /// Get sending session statistics.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
    pplx::task<std::shared_ptr<GetMessageSessionStatResponse>> getMessageSessionStat(
        int32_t id,
        boost::optional<int32_t> includeDeleted
    );
    /// <summary>
    /// Fetch messages by given session id.
    /// </summary>
    /// <remarks>
    /// A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="statuses">Find messages by status (optional)</param>
    /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
    pplx::task<std::shared_ptr<GetMessagesBySessionIdResponse>> getMessagesBySessionId(
        int32_t id,
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> statuses,
        boost::optional<int32_t> includeDeleted
    );
    /// <summary>
    /// Return counters for messaging data views.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<GetMessagingCountersResponse>> getMessagingCounters(
    );
    /// <summary>
    /// Return messaging statistics.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="by">Group results by specified period: off, day, month or year. Default is off (optional, default to off)</param>
    /// <param name="start">Start date in unix timestamp format. Default is 7 days ago (optional)</param>
    /// <param name="end">End date in unix timestamp format. Default is now (optional)</param>
    pplx::task<std::shared_ptr<GetMessagingStatResponse>> getMessagingStat(
        boost::optional<utility::string_t> by,
        boost::optional<int32_t> start,
        boost::optional<utility::string_t> end
    );
    /// <summary>
    /// Get a single message
    /// </summary>
    /// <remarks>
    /// Get a single outgoing message.
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<MessageOut>> getOutboundMessage(
        int32_t id
    );
    /// <summary>
    /// Get history
    /// </summary>
    /// <remarks>
    /// Get outbound messages history.
    /// </remarks>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
    /// <param name="query">Find message by specified search query (optional)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    pplx::task<std::shared_ptr<GetOutboundMessagesHistoryResponse>> getOutboundMessagesHistory(
        boost::optional<int32_t> limit,
        boost::optional<int32_t> lastId,
        boost::optional<utility::string_t> query,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction
    );
    /// <summary>
    /// Get all device tokens assigned to the current account
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<GetPushTokensResponse>> getPushTokens(
    );
    /// <summary>
    /// Get message schedule.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<MessagesIcs>> getScheduledMessage(
        int32_t id
    );
    /// <summary>
    /// Get a single Sender ID.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<SenderId>> getSenderId(
        int32_t id
    );
    /// <summary>
    /// Get all sender IDs of current user.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    pplx::task<std::shared_ptr<GetSenderIdsResponse>> getSenderIds(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Get current user sender settings.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="country">Return sender settings enabled for sending to specified country. Two upper case characters (optional)</param>
    pplx::task<std::shared_ptr<GetSenderSettingsResponse>> getSenderSettings(
        boost::optional<utility::string_t> country
    );
    /// <summary>
    /// Return account spending statistics.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="start">Optional. Start date in unix timestamp format. Default is 7 days ago (optional)</param>
    /// <param name="end">Optional. End date in unix timestamp format. Default is now (optional)</param>
    pplx::task<std::shared_ptr<GetSpendingStatResponse>> getSpendingStat(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<int32_t> start,
        boost::optional<int32_t> end
    );
    /// <summary>
    /// Get current entities state
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<GetStateResponse>> getState(
    );
    /// <summary>
    /// Get a single subaccount.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<User>> getSubaccount(
        int32_t id
    );
    /// <summary>
    /// Get all subaccounts of current user.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    pplx::task<std::shared_ptr<User>> getSubaccounts(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Get all subaccounts with their REST API tokens associated with specified app name.
    /// </summary>
    /// <remarks>
    /// When more than one token related to app name, last key will be returned.
    /// </remarks>
    /// <param name="getSubaccountsWithTokensInputObject"></param>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<GetSubaccountsWithTokensResponse>> getSubaccountsWithTokens(
        std::shared_ptr<GetSubaccountsWithTokensInputObject> getSubaccountsWithTokensInputObject,
        boost::optional<double> page,
        boost::optional<int32_t> limit,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Get a survey by id.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<Survey>> getSurvey(
        int32_t id
    );
    /// <summary>
    /// Get a node by id.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<SurveyNode>> getSurveyNode(
        int32_t id
    );
    /// <summary>
    /// Fetch nodes by given survey id.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<GetSurveyNodesResponse>> getSurveyNodes(
        int32_t id
    );
    /// <summary>
    /// Get all user surveys.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    pplx::task<std::shared_ptr<GetSurveysResponse>> getSurveys(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Get a single template.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<MessageTemplate>> getTemplate(
        int32_t id
    );
    /// <summary>
    /// Return all available timezone IDs.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0 (optional, default to 0)</param>
    pplx::task<std::shared_ptr<Object>> getTimezones(
        boost::optional<int32_t> full
    );
    /// <summary>
    /// Get total amount of unread messages in the current user chats.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<GetUnreadMessagesTotalResponse>> getUnreadMessagesTotal(
    );
    /// <summary>
    /// Get a single unsubscribed contact.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<UnsubscribedContact>> getUnsubscribedContact(
        int32_t id
    );
    /// <summary>
    /// Get all contact have unsubscribed from your communication.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    pplx::task<std::shared_ptr<GetUnsubscribersResponse>> getUnsubscribers(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Get user&#39;s dedicated numbers.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="surveyId">Fetch only that numbers which are ready for the survey (optional)</param>
    pplx::task<std::shared_ptr<GetUserDedicatedNumbersResponse>> getUserDedicatedNumbers(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<int32_t> surveyId
    );
    /// <summary>
    /// Get all user lists.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    /// <param name="favoriteOnly">Return only favorite lists (optional, default to 0)</param>
    /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
    pplx::task<std::shared_ptr<GetUserListsResponse>> getUserLists(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction,
        boost::optional<int32_t> favoriteOnly,
        boost::optional<int32_t> onlyMine
    );
    /// <summary>
    /// Get minimal valid apps versions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<GetVersionsResponse>> getVersions(
    );
    /// <summary>
    /// Invite new subaccount.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="inviteSubaccountInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> inviteSubaccount(
        std::shared_ptr<InviteSubaccountInputObject> inviteSubaccountInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Mark several chats as read by chat ids or mark all chats as read
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="markChatsReadBulkInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> markChatsReadBulk(
        std::shared_ptr<MarkChatsReadBulkInputObject> markChatsReadBulkInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Mark several chats as UNread by chat ids or mark all chats as UNread
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="markChatsUnreadBulkInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> markChatsUnreadBulk(
        std::shared_ptr<MarkChatsUnreadBulkInputObject> markChatsUnreadBulkInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Merge two question nodes.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="mergeSurveyNodesInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> mergeSurveyNodes(
        std::shared_ptr<MergeSurveyNodesInputObject> mergeSurveyNodesInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Set mute mode.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="muteChatInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> muteChat(
        std::shared_ptr<MuteChatInputObject> muteChatInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Mute several chats by chat ids or mute all chats
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="muteChatsBulkInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> muteChatsBulk(
        std::shared_ptr<MuteChatsBulkInputObject> muteChatsBulkInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Just does a pong.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<PingResponse>> ping(
    );
    /// <summary>
    /// Reopen chats by chat ids or reopen all chats
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="reopenChatsBulkInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> reopenChatsBulk(
        std::shared_ptr<ReopenChatsBulkInputObject> reopenChatsBulkInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Request a new REST API token for subaccount.
    /// </summary>
    /// <remarks>
    /// Returning user object, key and app name.
    /// </remarks>
    /// <param name="requestNewSubaccountTokenInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<User>> requestNewSubaccountToken(
        std::shared_ptr<RequestNewSubaccountTokenInputObject> requestNewSubaccountTokenInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Request for a new Sender ID.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="requestSenderIdInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> requestSenderId(
        std::shared_ptr<RequestSenderIdInputObject> requestSenderIdInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Reset a survey flow.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> resetSurvey(
        int32_t id
    );
    /// <summary>
    /// Find chats by inbound or outbound messages text.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="query">Find chats by specified search query (optional)</param>
    pplx::task<std::shared_ptr<SearchChatsResponse>> searchChats(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> query
    );
    /// <summary>
    /// Find chats by IDs.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="ids">Find chats by ID(s) (optional)</param>
    pplx::task<std::shared_ptr<SearchChatsByIdsResponse>> searchChatsByIds(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> ids
    );
    /// <summary>
    /// Find chats by recipient (contact, list name or phone number).
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="query">Find chats by specified search query (optional)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    pplx::task<std::shared_ptr<SearchChatsByReceipentResponse>> searchChatsByReceipent(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> query,
        boost::optional<utility::string_t> orderBy
    );
    /// <summary>
    /// Find user contacts by given parameters.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
    /// <param name="ids">Find contact by ID(s) (optional)</param>
    /// <param name="listId">Find contact by List ID (optional)</param>
    /// <param name="includeBlocked">Should blocked contacts to be included (optional)</param>
    /// <param name="query">Find contacts by specified search query (optional)</param>
    /// <param name="local">Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)</param>
    /// <param name="country">2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    pplx::task<std::shared_ptr<SearchContactsResponse>> searchContacts(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<int32_t> shared,
        boost::optional<utility::string_t> ids,
        boost::optional<int32_t> listId,
        boost::optional<int32_t> includeBlocked,
        boost::optional<utility::string_t> query,
        boost::optional<int32_t> local,
        boost::optional<utility::string_t> country,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction
    );
    /// <summary>
    /// Find inbound messages by given parameters.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="ids">Find message by ID(s) (optional)</param>
    /// <param name="query">Find recipients by specified search query (optional)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    /// <param name="expand">Expand by adding firstName, lastName and contactId (optional, default to 0)</param>
    pplx::task<std::shared_ptr<SearchInboundMessagesResponse>> searchInboundMessages(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> ids,
        boost::optional<utility::string_t> query,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction,
        boost::optional<int32_t> expand
    );
    /// <summary>
    /// Find contact lists by given parameters.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="ids">Find lists by ID(s) (optional)</param>
    /// <param name="query">Find lists by specified search query (optional)</param>
    /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
    /// <param name="onlyDefault">Return only default lists (optional, default to 0)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    pplx::task<std::shared_ptr<SearchListsResponse>> searchLists(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> ids,
        boost::optional<utility::string_t> query,
        boost::optional<int32_t> onlyMine,
        boost::optional<int32_t> onlyDefault,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction
    );
    /// <summary>
    /// Find messages
    /// </summary>
    /// <remarks>
    /// Find outbound messages by given parameters.
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
    /// <param name="ids">Find message by ID(s) (optional)</param>
    /// <param name="sessionId">Find messages by session ID (optional)</param>
    /// <param name="statuses">Find messages by status (optional)</param>
    /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
    /// <param name="query">Find messages by specified search query (optional)</param>
    pplx::task<std::shared_ptr<SearchOutboundMessagesResponse>> searchOutboundMessages(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<int32_t> lastId,
        boost::optional<utility::string_t> ids,
        boost::optional<int32_t> sessionId,
        boost::optional<utility::string_t> statuses,
        boost::optional<int32_t> includeDeleted,
        boost::optional<utility::string_t> query
    );
    /// <summary>
    /// Find scheduled messages by given parameters.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="query">Find messages by specified search query (optional)</param>
    /// <param name="ids">Find schedules by ID(s) (optional)</param>
    /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    pplx::task<std::shared_ptr<SearchScheduledMessagesResponse>> searchScheduledMessages(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> query,
        boost::optional<utility::string_t> ids,
        boost::optional<utility::string_t> status,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction
    );
    /// <summary>
    /// Find user templates by given parameters.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page (optional, default to 1)</param>
    /// <param name="limit">How many results to return (optional, default to 10)</param>
    /// <param name="ids">Find template by ID(s) (optional)</param>
    /// <param name="name">Find template by name (optional)</param>
    /// <param name="content">Find template by content (optional)</param>
    pplx::task<std::shared_ptr<SearchTemplatesResponse>> searchTemplates(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> ids,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> content
    );
    /// <summary>
    /// Send user email verification
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<void> sendEmailVerificationCode(
    );
    /// <summary>
    /// Send message
    /// </summary>
    /// <remarks>
    /// The main entrypoint to send messages. See examples above for the reference.
    /// </remarks>
    /// <param name="sendMessageInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<SendMessageResponse>> sendMessage(
        std::shared_ptr<SendMessageInputObject> sendMessageInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Send user phone verification
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<void> sendPhoneVerificationCode(
    );
    /// <summary>
    /// Set status of the chat given by ID.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="setChatStatusInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> setChatStatus(
        std::shared_ptr<SetChatStatusInputObject> setChatStatusInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Start a survey.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> startSurvey(
        int32_t id
    );
    /// <summary>
    /// Unblock contact by phone number.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="unblockContactInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> unblockContact(
        std::shared_ptr<UnblockContactInputObject> unblockContactInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Unblock several contacts by blocked contact ids or unblock all contacts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="unblockContactsBulkInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> unblockContactsBulk(
        std::shared_ptr<UnblockContactsBulkInputObject> unblockContactsBulkInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Unmute several chats by chat ids or unmute all chats
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="unmuteChatsBulkInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> unmuteChatsBulk(
        std::shared_ptr<UnmuteChatsBulkInputObject> unmuteChatsBulkInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Unsubscribe contact from your communication by phone number.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="unsubscribeContactInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> unsubscribeContact(
        std::shared_ptr<UnsubscribeContactInputObject> unsubscribeContactInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Update balance notification settings
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateBalanceNotificationSettingsInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> updateBalanceNotificationSettings(
        std::shared_ptr<UpdateBalanceNotificationSettingsInputObject> updateBalanceNotificationSettingsInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Update callback URL settings
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateCallbackSettingsInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> updateCallbackSettings(
        std::shared_ptr<UpdateCallbackSettingsInputObject> updateCallbackSettingsInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Update chat desktop notification settings
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> updateChatDesktopNotificationSettings(
        std::shared_ptr<UpdateChatDesktopNotificationSettingsInputObject> updateChatDesktopNotificationSettingsInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Update existing contact.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateContactInputObject"></param>
    /// <param name="id"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> updateContact(
        std::shared_ptr<UpdateContactInputObject> updateContactInputObject,
        int32_t id,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Update existing contact note.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateContactNoteInputObject"></param>
    /// <param name="id"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> updateContactNote(
        std::shared_ptr<UpdateContactNoteInputObject> updateContactNoteInputObject,
        int32_t id,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Update current user info.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateCurrentUserInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<UpdateCurrentUserResponse>> updateCurrentUser(
        std::shared_ptr<UpdateCurrentUserInputObject> updateCurrentUserInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Update existing custom field.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateCustomFieldInputObject"></param>
    /// <param name="id"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> updateCustomField(
        std::shared_ptr<UpdateCustomFieldInputObject> updateCustomFieldInputObject,
        int32_t id,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Update contact&#39;s custom field value.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateCustomFieldValueInputObject"></param>
    /// <param name="id"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> updateCustomFieldValue(
        std::shared_ptr<UpdateCustomFieldValueInputObject> updateCustomFieldValueInputObject,
        utility::string_t id,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Update inbound messages notification settings
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> updateInboundMessagesNotificationSettings(
        std::shared_ptr<UpdateInboundMessagesNotificationSettingsInputObject> updateInboundMessagesNotificationSettingsInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Update existing list.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="updateListObject"> (optional)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> updateList(
        int32_t id,
        boost::optional<std::shared_ptr<UpdateListObject>> updateListObject
    );
    /// <summary>
    /// Change user password.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updatePasswordInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> updatePassword(
        std::shared_ptr<UpdatePasswordInputObject> updatePasswordInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Change sender settings for specified country.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateSenderSettingInputObject"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<void> updateSenderSetting(
        std::shared_ptr<UpdateSenderSettingInputObject> updateSenderSettingInputObject,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Update existing survey.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateSurveyInputObject"></param>
    /// <param name="id"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> updateSurvey(
        std::shared_ptr<UpdateSurveyInputObject> updateSurveyInputObject,
        int32_t id,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Update existing node.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateSurveyNodeInputObject"></param>
    /// <param name="id"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> updateSurveyNode(
        std::shared_ptr<UpdateSurveyNodeInputObject> updateSurveyNodeInputObject,
        int32_t id,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Update existing template.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTemplateInputObject"></param>
    /// <param name="id"></param>
    /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> updateTemplate(
        std::shared_ptr<UpdateTemplateInputObject> updateTemplateInputObject,
        int32_t id,
        boost::optional<bool> xIgnoreNullValues
    );
    /// <summary>
    /// Add an avatar for the current user.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="image">User avatar. Should be PNG or JPG file not more than 10 MB</param>
    pplx::task<void> uploadAvatar(
        std::shared_ptr<HttpContent> image
    );
    /// <summary>
    /// Add an avatar for the contact.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="image">Contact avatar. Should be PNG or JPG file not more than 10 MB</param>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> uploadContactAvatar(
        std::shared_ptr<HttpContent> image,
        int32_t id
    );
    /// <summary>
    /// Add an avatar for the list.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="image">List avatar. Should be PNG or JPG file not more than 10 MB</param>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> uploadListAvatar(
        std::shared_ptr<HttpContent> image,
        int32_t id
    );
    /// <summary>
    /// Upload message attachment
    /// </summary>
    /// <remarks>
    /// Upload a new file to insert it as a link.
    /// </remarks>
    /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats</param>
    pplx::task<std::shared_ptr<UploadMessageAttachmentResponse>> uploadMessageAttachment(
        std::shared_ptr<HttpContent> file
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* COM_TEXTMAGIC_CLIENT_API_TextMagicApi_H_ */

