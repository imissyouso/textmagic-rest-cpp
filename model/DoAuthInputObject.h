/**
 * TextMagic API Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * DoAuthInputObject.h
 *
 * 
 */

#ifndef COM_TEXTMAGIC_CLIENT_MODEL_DoAuthInputObject_H_
#define COM_TEXTMAGIC_CLIENT_MODEL_DoAuthInputObject_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace textmagic {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  DoAuthInputObject
    : public ModelBase
{
public:
    DoAuthInputObject();
    virtual ~DoAuthInputObject();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DoAuthInputObject members

    /// <summary>
    /// Account username or email
    /// </summary>
    utility::string_t getUsername() const;
        void setUsername(utility::string_t value);
    /// <summary>
    /// Account password
    /// </summary>
    utility::string_t getPassword() const;
        void setPassword(utility::string_t value);
    /// <summary>
    /// Application name
    /// </summary>
    utility::string_t getAppName() const;
    bool appNameIsSet() const;
    void unsetAppName();
    void setAppName(utility::string_t value);
    /// <summary>
    /// Application version
    /// </summary>
    utility::string_t getAppVersion() const;
    bool appVersionIsSet() const;
    void unsetAppVersion();
    void setAppVersion(utility::string_t value);
    /// <summary>
    /// Device ID for push notification service
    /// </summary>
    utility::string_t getDeviceId() const;
    bool deviceIdIsSet() const;
    void unsetDeviceId();
    void setDeviceId(utility::string_t value);
    /// <summary>
    /// required when deviceId provided. Push notification service type: a for Apple Push Notifications, g for Google Cloud Messaging
    /// </summary>
    utility::string_t getPushServiceType() const;
    bool pushServiceTypeIsSet() const;
    void unsetPushServiceType();
    void setPushServiceType(utility::string_t value);
    /// <summary>
    /// required when 2FA enabled on account. 2FA challenge response (SMS code or security question answer)
    /// </summary>
    utility::string_t getTfaCode() const;
    bool tfaCodeIsSet() const;
    void unsetTfaCode();
    void setTfaCode(utility::string_t value);
    /// <summary>
    /// required when 2FA enabled on account. 2FA challenge response (SMS code or security question answer)
    /// </summary>
    utility::string_t getTfaId() const;
    bool tfaIdIsSet() const;
    void unsetTfaId();
    void setTfaId(utility::string_t value);

protected:
    utility::string_t m_Username;
        utility::string_t m_Password;
        utility::string_t m_AppName;
    bool m_AppNameIsSet;
    utility::string_t m_AppVersion;
    bool m_AppVersionIsSet;
    utility::string_t m_DeviceId;
    bool m_DeviceIdIsSet;
    utility::string_t m_PushServiceType;
    bool m_PushServiceTypeIsSet;
    utility::string_t m_TfaCode;
    bool m_TfaCodeIsSet;
    utility::string_t m_TfaId;
    bool m_TfaIdIsSet;
};

}
}
}
}

#endif /* COM_TEXTMAGIC_CLIENT_MODEL_DoAuthInputObject_H_ */
