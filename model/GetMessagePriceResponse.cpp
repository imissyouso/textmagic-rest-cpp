/**
 * TextMagic API Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GetMessagePriceResponse.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

GetMessagePriceResponse::GetMessagePriceResponse()
{
    m_Total = 0.0;
    m_Parts = 0;
}

GetMessagePriceResponse::~GetMessagePriceResponse()
{
}

void GetMessagePriceResponse::validate()
{
    // TODO: implement validation
}

web::json::value GetMessagePriceResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("total")] = ModelBase::toJson(m_Total);
    val[utility::conversions::to_string_t("parts")] = ModelBase::toJson(m_Parts);
    val[utility::conversions::to_string_t("countries")] = ModelBase::toJson(m_Countries);

    return val;
}

void GetMessagePriceResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("total")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("total")];
        if(!fieldValue.is_null())
        {
            setTotal(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parts")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("parts")];
        if(!fieldValue.is_null())
        {
            setParts(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("countries")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("countries")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setCountries( newItem );
        }
    }
}

void GetMessagePriceResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("total"), m_Total));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parts"), m_Parts));
    m_Countries->toMultipart(multipart, utility::conversions::to_string_t("countries."));
}

void GetMessagePriceResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setTotal(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("total"))));
    setParts(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("parts"))));
    std::shared_ptr<Object> newCountries(nullptr);
    newCountries->fromMultiPart(multipart, utility::conversions::to_string_t("countries."));
    setCountries( newCountries );
}

double GetMessagePriceResponse::getTotal() const
{
    return m_Total;
}


void GetMessagePriceResponse::setTotal(double value)
{
    m_Total = value;
    
}
int32_t GetMessagePriceResponse::getParts() const
{
    return m_Parts;
}


void GetMessagePriceResponse::setParts(int32_t value)
{
    m_Parts = value;
    
}
std::shared_ptr<Object> GetMessagePriceResponse::getCountries() const
{
    return m_Countries;
}


void GetMessagePriceResponse::setCountries(std::shared_ptr<Object> value)
{
    m_Countries = value;
    
}
}
}
}
}

