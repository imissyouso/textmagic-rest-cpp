/**
 * TextMagic API Documentation
 * # Overview ## Introduction <img style=\"float: right; margin-left: 10px; width: 100px;\" src=\"images/phone.png\"> TextMagic SMS API is a platform for building your own messaging app using our messaging infrastructure. It allows you to send and receive SMS text messages, query information about inbound and outbound messages, manage contacts, create templates (i.e. message formats and static texts) and schedule recurrent SMS messages as well as process bulk SMS messages. <button name=\"button\" onclick=\"http://www.google.com\" class=\"btn\">Try TextMagic API for Free</button>  ### Two Ways to Use TextMagic API * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’s messaging gateway features * [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/) – set up two-way SMS communication without the need to write any additional code  ### Code Libraries We have created a set of client libraries for the most popular programming languages (such as REST API Java and REST API PHP). These libraries allow you to integrate our API into your code in minutes. Just choose your preferred language to get started:  ## Getting started Get Started with the TextMagic REST API To start sending text messages using the TextMagic REST API, just follow these steps: 1. Generate the API credentials 1. Connect to our API endpoint This page provides all the information you need to get started. Here, we explain the following steps:  How to obtain the API credentials The API endpoint How the REST API works The next step How to obtain the API credentials  ### How to obtain the API credentials To start sending text messages, you need to create an API key. API keys are similar to an account password; the difference is that an API key only provides access to the API: you cannot log in to TextMagic Online using the API key.  Your program sends the login credentials with each API request as HTTP headers: `X-TM-Username` is your TextMagic username, while `X-TM-Key` is your API key.  How to obtain an API key:  1. Log in to TextMagic (or start a free trial if you haven’t registered yet). 1. Go to the API settings page. 1. Click the Add new API key button. 1. Enter an app name for this key. Note, it’s just a label, so pick any name. 1. Click Generate new key. 1. You should now see your new API key in the green notification banner above the table:  ![alt text](images/credentials.png)  > Note for API v1 users > V1 keys are not compatible with the V2 version of the TextMagic REST API, so you will need to generate a new API key to use the V2 endpoint.  ### The API endpoint The TextMagic REST API endpoint is: ``` https://rest.textmagic.com/api/v2 ``` All the URLs referenced in this documentation should use this base URL.  ### How the REST API works REST APIs use the HTTP protocol to send and receive messages. REST messages are usually encoded as JSON documents and are an improvement over older methods such as the XML based SOAP protocol. REST APIs use the same set of methods that web browsers use: POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read, update and delete. Often, REST URIs provide direct CRUD access to entities or collections of entities, for example: http://api.foo.com/people. In this instance, to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}. REST makes these types of operations simple.  > Example > > Let’s take the entity most often used in messaging: contacts. Imagine you want to perform operations on your contacts list: well, it’s only a matter of calling the following endpoints: > * GET /api/v2/contacts (get all of your contacts) > * GET /api/v2/contacts/{id} (get a specific contact) > * POST /api/v2/contacts (create a new contact) > * PUT /api/v2/contacts/{id} (update an existing contact) > * DELETE /api/v2/contacts/{id} (delete an existing contact) It’s that simple! In fact, that’s all you need to do to manage the contacts in your TextMagic account!  ## Sandbox Sandbox is a tool to test TextMagic REST API requests without the need to install any applications or write any code. Here, we explain the following details about Sandbox: * The credentials area * Command documentation * How it works  <a href=\"\">Go to TextMagic Sandbox</a>  ### The credentials area To make requests using your TextMagic account, you need to enter your account username and your API key into the corresponding fields. You may also Save them in your browser or press Clear to erase them.  ![alt text](images/sandbox.png) 
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * MessageOut.h
 *
 * 
 */

#ifndef COM_TEXTMAGIC_CLIENT_MODEL_MessageOut_H_
#define COM_TEXTMAGIC_CLIENT_MODEL_MessageOut_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace textmagic {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  MessageOut
    : public ModelBase
{
public:
    MessageOut();
    virtual ~MessageOut();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// MessageOut members

    /// <summary>
    /// 
    /// </summary>
    int32_t getId() const;
        void setId(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getContactId() const;
        void setContactId(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getSessionId() const;
        void setSessionId(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReceiver() const;
    bool receiverIsSet() const;
    void unsetReceiver();
    void setReceiver(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getMessageTime() const;
        void setMessageTime(utility::datetime value);
    /// <summary>
    /// q - queued s - scheduled queue e - sending error r - enroute a - acked d - delivered b - buffered f - failed u - unknown j - rejected i - bulk insert p - scheduled suspend h - queue suspend
    /// </summary>
    utility::string_t getStatus() const;
        void setStatus(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAvatar() const;
        void setAvatar(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getText() const;
        void setText(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    bool isDeleted() const;
    bool deletedIsSet() const;
    void unsetDeleted();
    void setDeleted(bool value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCharset() const;
        void setCharset(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCharsetLabel() const;
        void setCharsetLabel(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFirstName() const;
        void setFirstName(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLastName() const;
        void setLastName(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCountry() const;
        void setCountry(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSender() const;
    bool senderIsSet() const;
    void unsetSender();
    void setSender(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPhone() const;
    bool phoneIsSet() const;
    void unsetPhone();
    void setPhone(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    float getPrice() const;
    bool priceIsSet() const;
    void unsetPrice();
    void setPrice(float value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getPartsCount() const;
        void setPartsCount(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFromEmail() const;
    bool fromEmailIsSet() const;
    void unsetFromEmail();
    void setFromEmail(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFromNumber() const;
    bool fromNumberIsSet() const;
    void unsetFromNumber();
    void setFromNumber(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSmscId() const;
    bool smscIdIsSet() const;
    void unsetSmscId();
    void setSmscId(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getContact() const;
    bool contactIsSet() const;
    void unsetContact();
    void setContact(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSource() const;
    bool sourceIsSet() const;
    void unsetSource();
    void setSource(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getDeliveredCount() const;
    bool deliveredCountIsSet() const;
    void unsetDeliveredCount();
    void setDeliveredCount(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getNumbersCount() const;
    bool numbersCountIsSet() const;
    void unsetNumbersCount();
    void setNumbersCount(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUserId();
    void setUserId(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCreditsPrice() const;
    bool creditsPriceIsSet() const;
    void unsetCreditsPrice();
    void setCreditsPrice(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getChars() const;
    bool charsIsSet() const;
    void unsetChars();
    void setChars(int32_t value);

protected:
    int32_t m_Id;
        int32_t m_ContactId;
        int32_t m_SessionId;
        utility::string_t m_Receiver;
    bool m_ReceiverIsSet;
    utility::datetime m_MessageTime;
        utility::string_t m_Status;
        utility::string_t m_Avatar;
        utility::string_t m_Text;
        bool m_Deleted;
    bool m_DeletedIsSet;
    utility::string_t m_Charset;
        utility::string_t m_CharsetLabel;
        utility::string_t m_FirstName;
        utility::string_t m_LastName;
        utility::string_t m_Country;
        utility::string_t m_Sender;
    bool m_SenderIsSet;
    utility::string_t m_Phone;
    bool m_PhoneIsSet;
    float m_Price;
    bool m_PriceIsSet;
    int32_t m_PartsCount;
        utility::string_t m_FromEmail;
    bool m_FromEmailIsSet;
    utility::string_t m_FromNumber;
    bool m_FromNumberIsSet;
    utility::string_t m_SmscId;
    bool m_SmscIdIsSet;
    utility::string_t m_Contact;
    bool m_ContactIsSet;
    utility::string_t m_Source;
    bool m_SourceIsSet;
    int32_t m_DeliveredCount;
    bool m_DeliveredCountIsSet;
    int32_t m_NumbersCount;
    bool m_NumbersCountIsSet;
    int32_t m_UserId;
    bool m_UserIdIsSet;
    utility::string_t m_CreditsPrice;
    bool m_CreditsPriceIsSet;
    int32_t m_Chars;
    bool m_CharsIsSet;
};

}
}
}
}

#endif /* COM_TEXTMAGIC_CLIENT_MODEL_MessageOut_H_ */
