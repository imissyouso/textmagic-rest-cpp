/**
 * TextMagic API Documentation
 * # Overview ## Introduction 22 <img style=\"float: right; margin-left: 10px; width: 100px;\" src=\"images/phone.png\"> TextMagic SMS API is a platform for building your own messaging app using our messaging infrastructure. It allows you to send and receive SMS text messages, query information about inbound and outbound messages, manage contacts, create templates (i.e. message formats and static texts) and schedule recurrent SMS messages as well as process bulk SMS messages. <button name=\"button\" onclick=\"http://www.google.com\" class=\"btn\">Try TextMagic API for Free</button>  ### Two Ways to Use TextMagic API * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’s messaging gateway features * [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/) – set up two-way SMS communication without the need to write any additional code  ### Code Libraries We have created a set of client libraries for the most popular programming languages (such as REST API Java and REST API PHP). These libraries allow you to integrate our API into your code in minutes. Just choose your preferred language to get started:  ## Getting started Get Started with the TextMagic REST API To start sending text messages using the TextMagic REST API, just follow these steps: 1. Generate the API credentials 1. Connect to our API endpoint This page provides all the information you need to get started. Here, we explain the following steps:  How to obtain the API credentials The API endpoint How the REST API works The next step How to obtain the API credentials  ### How to obtain the API credentials To start sending text messages, you need to create an API key. API keys are similar to an account password; the difference is that an API key only provides access to the API: you cannot log in to TextMagic Online using the API key.  Your program sends the login credentials with each API request as HTTP headers: `X-TM-Username` is your TextMagic username, while `X-TM-Key` is your API key.  How to obtain an API key:  1. Log in to TextMagic (or start a free trial if you haven’t registered yet). 1. Go to the API settings page. 1. Click the Add new API key button. 1. Enter an app name for this key. Note, it’s just a label, so pick any name. 1. Click Generate new key. 1. You should now see your new API key in the green notification banner above the table:  ![alt text](images/credentials.png)  > Note for API v1 users > V1 keys are not compatible with the V2 version of the TextMagic REST API, so you will need to generate a new API key to use the V2 endpoint.  ### The API endpoint The TextMagic REST API endpoint is: ``` https://rest.textmagic.com/api/v2 ``` All the URLs referenced in this documentation should use this base URL.  ### How the REST API works REST APIs use the HTTP protocol to send and receive messages. REST messages are usually encoded as JSON documents and are an improvement over older methods such as the XML based SOAP protocol. REST APIs use the same set of methods that web browsers use: POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read, update and delete. Often, REST URIs provide direct CRUD access to entities or collections of entities, for example: http://api.foo.com/people. In this instance, to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}. REST makes these types of operations simple.  > Example > > Let’s take the entity most often used in messaging: contacts. Imagine you want to perform operations on your contacts list: well, it’s only a matter of calling the following endpoints: > * GET /api/v2/contacts (get all of your contacts) > * GET /api/v2/contacts/{id} (get a specific contact) > * POST /api/v2/contacts (create a new contact) > * PUT /api/v2/contacts/{id} (update an existing contact) > * DELETE /api/v2/contacts/{id} (delete an existing contact) It’s that simple! In fact, that’s all you need to do to manage the contacts in your TextMagic account!  ## Sandbox Sandbox is a tool to test TextMagic REST API requests without the need to install any applications or write any code. Here, we explain the following details about Sandbox: * The credentials area * Command documentation * How it works  <a href=\"\">Go to TextMagic Sandbox</a>  ### The credentials area To make requests using your TextMagic account, you need to enter your account username and your API key into the corresponding fields. You may also Save them in your browser or press Clear to erase them.  ![alt text](images/sandbox.png) 
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UpdateBalanceNotificationSettingsInputObject.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

UpdateBalanceNotificationSettingsInputObject::UpdateBalanceNotificationSettingsInputObject()
{
    m_LowBalanceNotification = false;
    m_LowBalanceNotificationIsSet = false;
    m_AlertBalance = utility::conversions::to_string_t("");
    m_AlertPhone = utility::conversions::to_string_t("");
    m_AlertPhoneIsSet = false;
    m_AlertEmail1 = utility::conversions::to_string_t("");
    m_AlertEmail1IsSet = false;
    m_AlertEmail2 = utility::conversions::to_string_t("");
    m_AlertEmail2IsSet = false;
    m_AlertEmail3 = utility::conversions::to_string_t("");
    m_AlertEmail3IsSet = false;
}

UpdateBalanceNotificationSettingsInputObject::~UpdateBalanceNotificationSettingsInputObject()
{
}

void UpdateBalanceNotificationSettingsInputObject::validate()
{
    // TODO: implement validation
}

web::json::value UpdateBalanceNotificationSettingsInputObject::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_LowBalanceNotificationIsSet)
    {
        val[utility::conversions::to_string_t("lowBalanceNotification")] = ModelBase::toJson(m_LowBalanceNotification);
    }
    val[utility::conversions::to_string_t("alertBalance")] = ModelBase::toJson(m_AlertBalance);
    if(m_AlertPhoneIsSet)
    {
        val[utility::conversions::to_string_t("alertPhone")] = ModelBase::toJson(m_AlertPhone);
    }
    if(m_AlertEmail1IsSet)
    {
        val[utility::conversions::to_string_t("alertEmail1")] = ModelBase::toJson(m_AlertEmail1);
    }
    if(m_AlertEmail2IsSet)
    {
        val[utility::conversions::to_string_t("alertEmail2")] = ModelBase::toJson(m_AlertEmail2);
    }
    if(m_AlertEmail3IsSet)
    {
        val[utility::conversions::to_string_t("alertEmail3")] = ModelBase::toJson(m_AlertEmail3);
    }

    return val;
}

void UpdateBalanceNotificationSettingsInputObject::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("lowBalanceNotification")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lowBalanceNotification")];
        if(!fieldValue.is_null())
        {
            setLowBalanceNotification(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("alertBalance")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("alertBalance")];
        if(!fieldValue.is_null())
        {
            setAlertBalance(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("alertPhone")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("alertPhone")];
        if(!fieldValue.is_null())
        {
            setAlertPhone(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("alertEmail1")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("alertEmail1")];
        if(!fieldValue.is_null())
        {
            setAlertEmail1(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("alertEmail2")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("alertEmail2")];
        if(!fieldValue.is_null())
        {
            setAlertEmail2(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("alertEmail3")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("alertEmail3")];
        if(!fieldValue.is_null())
        {
            setAlertEmail3(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void UpdateBalanceNotificationSettingsInputObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_LowBalanceNotificationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lowBalanceNotification"), m_LowBalanceNotification));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("alertBalance"), m_AlertBalance));
    if(m_AlertPhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("alertPhone"), m_AlertPhone));
        
    }
    if(m_AlertEmail1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("alertEmail1"), m_AlertEmail1));
        
    }
    if(m_AlertEmail2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("alertEmail2"), m_AlertEmail2));
        
    }
    if(m_AlertEmail3IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("alertEmail3"), m_AlertEmail3));
        
    }
}

void UpdateBalanceNotificationSettingsInputObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("lowBalanceNotification")))
    {
        setLowBalanceNotification(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lowBalanceNotification"))));
    }
    setAlertBalance(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("alertBalance"))));
    if(multipart->hasContent(utility::conversions::to_string_t("alertPhone")))
    {
        setAlertPhone(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("alertPhone"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("alertEmail1")))
    {
        setAlertEmail1(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("alertEmail1"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("alertEmail2")))
    {
        setAlertEmail2(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("alertEmail2"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("alertEmail3")))
    {
        setAlertEmail3(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("alertEmail3"))));
    }
}

bool UpdateBalanceNotificationSettingsInputObject::isLowBalanceNotification() const
{
    return m_LowBalanceNotification;
}


void UpdateBalanceNotificationSettingsInputObject::setLowBalanceNotification(bool value)
{
    m_LowBalanceNotification = value;
    m_LowBalanceNotificationIsSet = true;
}
bool UpdateBalanceNotificationSettingsInputObject::lowBalanceNotificationIsSet() const
{
    return m_LowBalanceNotificationIsSet;
}

void UpdateBalanceNotificationSettingsInputObject::unsetLowBalanceNotification()
{
    m_LowBalanceNotificationIsSet = false;
}

utility::string_t UpdateBalanceNotificationSettingsInputObject::getAlertBalance() const
{
    return m_AlertBalance;
}


void UpdateBalanceNotificationSettingsInputObject::setAlertBalance(utility::string_t value)
{
    m_AlertBalance = value;
    
}
utility::string_t UpdateBalanceNotificationSettingsInputObject::getAlertPhone() const
{
    return m_AlertPhone;
}


void UpdateBalanceNotificationSettingsInputObject::setAlertPhone(utility::string_t value)
{
    m_AlertPhone = value;
    m_AlertPhoneIsSet = true;
}
bool UpdateBalanceNotificationSettingsInputObject::alertPhoneIsSet() const
{
    return m_AlertPhoneIsSet;
}

void UpdateBalanceNotificationSettingsInputObject::unsetAlertPhone()
{
    m_AlertPhoneIsSet = false;
}

utility::string_t UpdateBalanceNotificationSettingsInputObject::getAlertEmail1() const
{
    return m_AlertEmail1;
}


void UpdateBalanceNotificationSettingsInputObject::setAlertEmail1(utility::string_t value)
{
    m_AlertEmail1 = value;
    m_AlertEmail1IsSet = true;
}
bool UpdateBalanceNotificationSettingsInputObject::alertEmail1IsSet() const
{
    return m_AlertEmail1IsSet;
}

void UpdateBalanceNotificationSettingsInputObject::unsetAlertEmail1()
{
    m_AlertEmail1IsSet = false;
}

utility::string_t UpdateBalanceNotificationSettingsInputObject::getAlertEmail2() const
{
    return m_AlertEmail2;
}


void UpdateBalanceNotificationSettingsInputObject::setAlertEmail2(utility::string_t value)
{
    m_AlertEmail2 = value;
    m_AlertEmail2IsSet = true;
}
bool UpdateBalanceNotificationSettingsInputObject::alertEmail2IsSet() const
{
    return m_AlertEmail2IsSet;
}

void UpdateBalanceNotificationSettingsInputObject::unsetAlertEmail2()
{
    m_AlertEmail2IsSet = false;
}

utility::string_t UpdateBalanceNotificationSettingsInputObject::getAlertEmail3() const
{
    return m_AlertEmail3;
}


void UpdateBalanceNotificationSettingsInputObject::setAlertEmail3(utility::string_t value)
{
    m_AlertEmail3 = value;
    m_AlertEmail3IsSet = true;
}
bool UpdateBalanceNotificationSettingsInputObject::alertEmail3IsSet() const
{
    return m_AlertEmail3IsSet;
}

void UpdateBalanceNotificationSettingsInputObject::unsetAlertEmail3()
{
    m_AlertEmail3IsSet = false;
}

}
}
}
}

