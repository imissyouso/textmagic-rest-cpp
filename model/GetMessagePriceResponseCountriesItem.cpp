/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GetMessagePriceResponseCountriesItem.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

GetMessagePriceResponseCountriesItem::GetMessagePriceResponseCountriesItem()
{
    m_Country = utility::conversions::to_string_t("");
    m_Country_name = utility::conversions::to_string_t("");
    m_Allow_dedicated = false;
    m_Count = 0.0;
    m_Max = 0.0;
    m_Sum = utility::conversions::to_string_t("");
    m_Landline = 0.0;
}

GetMessagePriceResponseCountriesItem::~GetMessagePriceResponseCountriesItem()
{
}

void GetMessagePriceResponseCountriesItem::validate()
{
    // TODO: implement validation
}

web::json::value GetMessagePriceResponseCountriesItem::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("country")] = ModelBase::toJson(m_Country);
    val[utility::conversions::to_string_t("country_name")] = ModelBase::toJson(m_Country_name);
    val[utility::conversions::to_string_t("allow_dedicated")] = ModelBase::toJson(m_Allow_dedicated);
    val[utility::conversions::to_string_t("count")] = ModelBase::toJson(m_Count);
    val[utility::conversions::to_string_t("max")] = ModelBase::toJson(m_Max);
    val[utility::conversions::to_string_t("sum")] = ModelBase::toJson(m_Sum);
    val[utility::conversions::to_string_t("landline")] = ModelBase::toJson(m_Landline);

    return val;
}

void GetMessagePriceResponseCountriesItem::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("country")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("country")];
        if(!fieldValue.is_null())
        {
            setCountry(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("country_name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("country_name")];
        if(!fieldValue.is_null())
        {
            setCountryName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("allow_dedicated")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("allow_dedicated")];
        if(!fieldValue.is_null())
        {
            setAllowDedicated(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("count")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("count")];
        if(!fieldValue.is_null())
        {
            setCount(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("max")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("max")];
        if(!fieldValue.is_null())
        {
            setMax(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sum")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sum")];
        if(!fieldValue.is_null())
        {
            setSum(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("landline")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("landline")];
        if(!fieldValue.is_null())
        {
            setLandline(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void GetMessagePriceResponseCountriesItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("country"), m_Country));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("country_name"), m_Country_name));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("allow_dedicated"), m_Allow_dedicated));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("count"), m_Count));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("max"), m_Max));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sum"), m_Sum));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("landline"), m_Landline));
}

void GetMessagePriceResponseCountriesItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setCountry(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("country"))));
    setCountryName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("country_name"))));
    setAllowDedicated(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("allow_dedicated"))));
    setCount(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("count"))));
    setMax(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("max"))));
    setSum(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sum"))));
    setLandline(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("landline"))));
}

utility::string_t GetMessagePriceResponseCountriesItem::getCountry() const
{
    return m_Country;
}


void GetMessagePriceResponseCountriesItem::setCountry(utility::string_t value)
{
    m_Country = value;
    
}
utility::string_t GetMessagePriceResponseCountriesItem::getCountryName() const
{
    return m_Country_name;
}


void GetMessagePriceResponseCountriesItem::setCountryName(utility::string_t value)
{
    m_Country_name = value;
    
}
bool GetMessagePriceResponseCountriesItem::isAllowDedicated() const
{
    return m_Allow_dedicated;
}


void GetMessagePriceResponseCountriesItem::setAllowDedicated(bool value)
{
    m_Allow_dedicated = value;
    
}
double GetMessagePriceResponseCountriesItem::getCount() const
{
    return m_Count;
}


void GetMessagePriceResponseCountriesItem::setCount(double value)
{
    m_Count = value;
    
}
double GetMessagePriceResponseCountriesItem::getMax() const
{
    return m_Max;
}


void GetMessagePriceResponseCountriesItem::setMax(double value)
{
    m_Max = value;
    
}
utility::string_t GetMessagePriceResponseCountriesItem::getSum() const
{
    return m_Sum;
}


void GetMessagePriceResponseCountriesItem::setSum(utility::string_t value)
{
    m_Sum = value;
    
}
double GetMessagePriceResponseCountriesItem::getLandline() const
{
    return m_Landline;
}


void GetMessagePriceResponseCountriesItem::setLandline(double value)
{
    m_Landline = value;
    
}
}
}
}
}

