/**
 * TextMagic API Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GetSenderSettingsResponse.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

GetSenderSettingsResponse::GetSenderSettingsResponse()
{
}

GetSenderSettingsResponse::~GetSenderSettingsResponse()
{
}

void GetSenderSettingsResponse::validate()
{
    // TODO: implement validation
}

web::json::value GetSenderSettingsResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("user")] = ModelBase::toJson(m_User);
    val[utility::conversions::to_string_t("special")] = ModelBase::toJson(m_Special);
    val[utility::conversions::to_string_t("other")] = ModelBase::toJson(m_Other);

    return val;
}

void GetSenderSettingsResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("user")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("user")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setUser( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("special")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("special")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setSpecial( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("other")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("other")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setOther( newItem );
        }
    }
}

void GetSenderSettingsResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    m_User->toMultipart(multipart, utility::conversions::to_string_t("user."));
    m_Special->toMultipart(multipart, utility::conversions::to_string_t("special."));
    m_Other->toMultipart(multipart, utility::conversions::to_string_t("other."));
}

void GetSenderSettingsResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    std::shared_ptr<Object> newUser(nullptr);
    newUser->fromMultiPart(multipart, utility::conversions::to_string_t("user."));
    setUser( newUser );
    std::shared_ptr<Object> newSpecial(nullptr);
    newSpecial->fromMultiPart(multipart, utility::conversions::to_string_t("special."));
    setSpecial( newSpecial );
    std::shared_ptr<Object> newOther(nullptr);
    newOther->fromMultiPart(multipart, utility::conversions::to_string_t("other."));
    setOther( newOther );
}

std::shared_ptr<Object> GetSenderSettingsResponse::getUser() const
{
    return m_User;
}


void GetSenderSettingsResponse::setUser(std::shared_ptr<Object> value)
{
    m_User = value;
    
}
std::shared_ptr<Object> GetSenderSettingsResponse::getSpecial() const
{
    return m_Special;
}


void GetSenderSettingsResponse::setSpecial(std::shared_ptr<Object> value)
{
    m_Special = value;
    
}
std::shared_ptr<Object> GetSenderSettingsResponse::getOther() const
{
    return m_Other;
}


void GetSenderSettingsResponse::setOther(std::shared_ptr<Object> value)
{
    m_Other = value;
    
}
}
}
}
}

