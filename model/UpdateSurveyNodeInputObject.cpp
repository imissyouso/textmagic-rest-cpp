/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UpdateSurveyNodeInputObject.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

UpdateSurveyNodeInputObject::UpdateSurveyNodeInputObject()
{
    m_Label = utility::conversions::to_string_t("");
    m_LabelIsSet = false;
    m_IsEndNode = false;
    m_IsEndNodeIsSet = false;
    m_Body = utility::conversions::to_string_t("");
    m_BodyIsSet = false;
    m_SendDelay = 0;
    m_SendDelayIsSet = false;
}

UpdateSurveyNodeInputObject::~UpdateSurveyNodeInputObject()
{
}

void UpdateSurveyNodeInputObject::validate()
{
    // TODO: implement validation
}

web::json::value UpdateSurveyNodeInputObject::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_LabelIsSet)
    {
        val[utility::conversions::to_string_t("label")] = ModelBase::toJson(m_Label);
    }
    if(m_IsEndNodeIsSet)
    {
        val[utility::conversions::to_string_t("isEndNode")] = ModelBase::toJson(m_IsEndNode);
    }
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t("body")] = ModelBase::toJson(m_Body);
    }
    if(m_SendDelayIsSet)
    {
        val[utility::conversions::to_string_t("sendDelay")] = ModelBase::toJson(m_SendDelay);
    }

    return val;
}

void UpdateSurveyNodeInputObject::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("label")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("label")];
        if(!fieldValue.is_null())
        {
            setLabel(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isEndNode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("isEndNode")];
        if(!fieldValue.is_null())
        {
            setIsEndNode(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("body")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("body")];
        if(!fieldValue.is_null())
        {
            setBody(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sendDelay")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sendDelay")];
        if(!fieldValue.is_null())
        {
            setSendDelay(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void UpdateSurveyNodeInputObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("label"), m_Label));
        
    }
    if(m_IsEndNodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isEndNode"), m_IsEndNode));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("body"), m_Body));
        
    }
    if(m_SendDelayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sendDelay"), m_SendDelay));
    }
}

void UpdateSurveyNodeInputObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("label")))
    {
        setLabel(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("label"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isEndNode")))
    {
        setIsEndNode(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("isEndNode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("body")))
    {
        setBody(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("body"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sendDelay")))
    {
        setSendDelay(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sendDelay"))));
    }
}

utility::string_t UpdateSurveyNodeInputObject::getLabel() const
{
    return m_Label;
}


void UpdateSurveyNodeInputObject::setLabel(utility::string_t value)
{
    m_Label = value;
    m_LabelIsSet = true;
}
bool UpdateSurveyNodeInputObject::labelIsSet() const
{
    return m_LabelIsSet;
}

void UpdateSurveyNodeInputObject::unsetLabel()
{
    m_LabelIsSet = false;
}

bool UpdateSurveyNodeInputObject::isIsEndNode() const
{
    return m_IsEndNode;
}


void UpdateSurveyNodeInputObject::setIsEndNode(bool value)
{
    m_IsEndNode = value;
    m_IsEndNodeIsSet = true;
}
bool UpdateSurveyNodeInputObject::isEndNodeIsSet() const
{
    return m_IsEndNodeIsSet;
}

void UpdateSurveyNodeInputObject::unsetIsEndNode()
{
    m_IsEndNodeIsSet = false;
}

utility::string_t UpdateSurveyNodeInputObject::getBody() const
{
    return m_Body;
}


void UpdateSurveyNodeInputObject::setBody(utility::string_t value)
{
    m_Body = value;
    m_BodyIsSet = true;
}
bool UpdateSurveyNodeInputObject::bodyIsSet() const
{
    return m_BodyIsSet;
}

void UpdateSurveyNodeInputObject::unsetBody()
{
    m_BodyIsSet = false;
}

int32_t UpdateSurveyNodeInputObject::getSendDelay() const
{
    return m_SendDelay;
}


void UpdateSurveyNodeInputObject::setSendDelay(int32_t value)
{
    m_SendDelay = value;
    m_SendDelayIsSet = true;
}
bool UpdateSurveyNodeInputObject::sendDelayIsSet() const
{
    return m_SendDelayIsSet;
}

void UpdateSurveyNodeInputObject::unsetSendDelay()
{
    m_SendDelayIsSet = false;
}

}
}
}
}

