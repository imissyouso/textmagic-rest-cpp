/**
 * TextMagic API Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CreateSurveyNodeInputObject.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

CreateSurveyNodeInputObject::CreateSurveyNodeInputObject()
{
    m_NodeType = utility::conversions::to_string_t("");
    m_NodeTypeIsSet = false;
    m_Label = utility::conversions::to_string_t("");
    m_LabelIsSet = false;
    m_Body = utility::conversions::to_string_t("");
    m_BodyIsSet = false;
    m_StartNode = 0;
    m_StartNodeIsSet = false;
    m_SendDelay = 0;
    m_SendDelayIsSet = false;
}

CreateSurveyNodeInputObject::~CreateSurveyNodeInputObject()
{
}

void CreateSurveyNodeInputObject::validate()
{
    // TODO: implement validation
}

web::json::value CreateSurveyNodeInputObject::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NodeTypeIsSet)
    {
        val[utility::conversions::to_string_t("nodeType")] = ModelBase::toJson(m_NodeType);
    }
    if(m_LabelIsSet)
    {
        val[utility::conversions::to_string_t("label")] = ModelBase::toJson(m_Label);
    }
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t("body")] = ModelBase::toJson(m_Body);
    }
    if(m_StartNodeIsSet)
    {
        val[utility::conversions::to_string_t("startNode")] = ModelBase::toJson(m_StartNode);
    }
    if(m_SendDelayIsSet)
    {
        val[utility::conversions::to_string_t("sendDelay")] = ModelBase::toJson(m_SendDelay);
    }

    return val;
}

void CreateSurveyNodeInputObject::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("nodeType")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("nodeType")];
        if(!fieldValue.is_null())
        {
            setNodeType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("label")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("label")];
        if(!fieldValue.is_null())
        {
            setLabel(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("body")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("body")];
        if(!fieldValue.is_null())
        {
            setBody(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("startNode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("startNode")];
        if(!fieldValue.is_null())
        {
            setStartNode(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sendDelay")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sendDelay")];
        if(!fieldValue.is_null())
        {
            setSendDelay(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void CreateSurveyNodeInputObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NodeTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeType"), m_NodeType));
        
    }
    if(m_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("label"), m_Label));
        
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("body"), m_Body));
        
    }
    if(m_StartNodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startNode"), m_StartNode));
    }
    if(m_SendDelayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sendDelay"), m_SendDelay));
    }
}

void CreateSurveyNodeInputObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("nodeType")))
    {
        setNodeType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeType"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("label")))
    {
        setLabel(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("label"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("body")))
    {
        setBody(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("body"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startNode")))
    {
        setStartNode(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("startNode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sendDelay")))
    {
        setSendDelay(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sendDelay"))));
    }
}

utility::string_t CreateSurveyNodeInputObject::getNodeType() const
{
    return m_NodeType;
}


void CreateSurveyNodeInputObject::setNodeType(utility::string_t value)
{
    m_NodeType = value;
    m_NodeTypeIsSet = true;
}
bool CreateSurveyNodeInputObject::nodeTypeIsSet() const
{
    return m_NodeTypeIsSet;
}

void CreateSurveyNodeInputObject::unsetNodeType()
{
    m_NodeTypeIsSet = false;
}

utility::string_t CreateSurveyNodeInputObject::getLabel() const
{
    return m_Label;
}


void CreateSurveyNodeInputObject::setLabel(utility::string_t value)
{
    m_Label = value;
    m_LabelIsSet = true;
}
bool CreateSurveyNodeInputObject::labelIsSet() const
{
    return m_LabelIsSet;
}

void CreateSurveyNodeInputObject::unsetLabel()
{
    m_LabelIsSet = false;
}

utility::string_t CreateSurveyNodeInputObject::getBody() const
{
    return m_Body;
}


void CreateSurveyNodeInputObject::setBody(utility::string_t value)
{
    m_Body = value;
    m_BodyIsSet = true;
}
bool CreateSurveyNodeInputObject::bodyIsSet() const
{
    return m_BodyIsSet;
}

void CreateSurveyNodeInputObject::unsetBody()
{
    m_BodyIsSet = false;
}

int32_t CreateSurveyNodeInputObject::getStartNode() const
{
    return m_StartNode;
}


void CreateSurveyNodeInputObject::setStartNode(int32_t value)
{
    m_StartNode = value;
    m_StartNodeIsSet = true;
}
bool CreateSurveyNodeInputObject::startNodeIsSet() const
{
    return m_StartNodeIsSet;
}

void CreateSurveyNodeInputObject::unsetStartNode()
{
    m_StartNodeIsSet = false;
}

int32_t CreateSurveyNodeInputObject::getSendDelay() const
{
    return m_SendDelay;
}


void CreateSurveyNodeInputObject::setSendDelay(int32_t value)
{
    m_SendDelay = value;
    m_SendDelayIsSet = true;
}
bool CreateSurveyNodeInputObject::sendDelayIsSet() const
{
    return m_SendDelayIsSet;
}

void CreateSurveyNodeInputObject::unsetSendDelay()
{
    m_SendDelayIsSet = false;
}

}
}
}
}

