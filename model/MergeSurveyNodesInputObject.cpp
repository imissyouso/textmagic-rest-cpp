/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MergeSurveyNodesInputObject.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

MergeSurveyNodesInputObject::MergeSurveyNodesInputObject()
{
    m_FirstNode = 0;
    m_SecondNode = 0;
}

MergeSurveyNodesInputObject::~MergeSurveyNodesInputObject()
{
}

void MergeSurveyNodesInputObject::validate()
{
    // TODO: implement validation
}

web::json::value MergeSurveyNodesInputObject::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("firstNode")] = ModelBase::toJson(m_FirstNode);
    val[utility::conversions::to_string_t("secondNode")] = ModelBase::toJson(m_SecondNode);

    return val;
}

void MergeSurveyNodesInputObject::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("firstNode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("firstNode")];
        if(!fieldValue.is_null())
        {
            setFirstNode(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("secondNode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("secondNode")];
        if(!fieldValue.is_null())
        {
            setSecondNode(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void MergeSurveyNodesInputObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("firstNode"), m_FirstNode));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("secondNode"), m_SecondNode));
}

void MergeSurveyNodesInputObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setFirstNode(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("firstNode"))));
    setSecondNode(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("secondNode"))));
}

int32_t MergeSurveyNodesInputObject::getFirstNode() const
{
    return m_FirstNode;
}


void MergeSurveyNodesInputObject::setFirstNode(int32_t value)
{
    m_FirstNode = value;
    
}
int32_t MergeSurveyNodesInputObject::getSecondNode() const
{
    return m_SecondNode;
}


void MergeSurveyNodesInputObject::setSecondNode(int32_t value)
{
    m_SecondNode = value;
    
}
}
}
}
}

