/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UpdateSurveyInputObject.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

UpdateSurveyInputObject::UpdateSurveyInputObject()
{
    m_Name = utility::conversions::to_string_t("");
    m_Contacts = utility::conversions::to_string_t("");
    m_ContactsIsSet = false;
    m_Lists = utility::conversions::to_string_t("");
    m_ListsIsSet = false;
    m_Phones = utility::conversions::to_string_t("");
    m_PhonesIsSet = false;
    m_CountryIsSet = false;
}

UpdateSurveyInputObject::~UpdateSurveyInputObject()
{
}

void UpdateSurveyInputObject::validate()
{
    // TODO: implement validation
}

web::json::value UpdateSurveyInputObject::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    if(m_ContactsIsSet)
    {
        val[utility::conversions::to_string_t("contacts")] = ModelBase::toJson(m_Contacts);
    }
    if(m_ListsIsSet)
    {
        val[utility::conversions::to_string_t("lists")] = ModelBase::toJson(m_Lists);
    }
    if(m_PhonesIsSet)
    {
        val[utility::conversions::to_string_t("phones")] = ModelBase::toJson(m_Phones);
    }
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t("country")] = ModelBase::toJson(m_Country);
    }

    return val;
}

void UpdateSurveyInputObject::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("name")];
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contacts")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("contacts")];
        if(!fieldValue.is_null())
        {
            setContacts(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lists")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lists")];
        if(!fieldValue.is_null())
        {
            setLists(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phones")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("phones")];
        if(!fieldValue.is_null())
        {
            setPhones(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("country")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("country")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setCountry( newItem );
        }
    }
}

void UpdateSurveyInputObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    if(m_ContactsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contacts"), m_Contacts));
        
    }
    if(m_ListsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lists"), m_Lists));
        
    }
    if(m_PhonesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phones"), m_Phones));
        
    }
    if(m_CountryIsSet)
    {
        if (m_Country.get())
        {
            m_Country->toMultipart(multipart, utility::conversions::to_string_t("country."));
        }
        
    }
}

void UpdateSurveyInputObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    if(multipart->hasContent(utility::conversions::to_string_t("contacts")))
    {
        setContacts(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("contacts"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lists")))
    {
        setLists(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lists"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("phones")))
    {
        setPhones(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("phones"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("country")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("country")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("country."));
            setCountry( newItem );
        }
    }
}

utility::string_t UpdateSurveyInputObject::getName() const
{
    return m_Name;
}


void UpdateSurveyInputObject::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t UpdateSurveyInputObject::getContacts() const
{
    return m_Contacts;
}


void UpdateSurveyInputObject::setContacts(utility::string_t value)
{
    m_Contacts = value;
    m_ContactsIsSet = true;
}
bool UpdateSurveyInputObject::contactsIsSet() const
{
    return m_ContactsIsSet;
}

void UpdateSurveyInputObject::unsetContacts()
{
    m_ContactsIsSet = false;
}

utility::string_t UpdateSurveyInputObject::getLists() const
{
    return m_Lists;
}


void UpdateSurveyInputObject::setLists(utility::string_t value)
{
    m_Lists = value;
    m_ListsIsSet = true;
}
bool UpdateSurveyInputObject::listsIsSet() const
{
    return m_ListsIsSet;
}

void UpdateSurveyInputObject::unsetLists()
{
    m_ListsIsSet = false;
}

utility::string_t UpdateSurveyInputObject::getPhones() const
{
    return m_Phones;
}


void UpdateSurveyInputObject::setPhones(utility::string_t value)
{
    m_Phones = value;
    m_PhonesIsSet = true;
}
bool UpdateSurveyInputObject::phonesIsSet() const
{
    return m_PhonesIsSet;
}

void UpdateSurveyInputObject::unsetPhones()
{
    m_PhonesIsSet = false;
}

std::shared_ptr<Object> UpdateSurveyInputObject::getCountry() const
{
    return m_Country;
}


void UpdateSurveyInputObject::setCountry(std::shared_ptr<Object> value)
{
    m_Country = value;
    m_CountryIsSet = true;
}
bool UpdateSurveyInputObject::countryIsSet() const
{
    return m_CountryIsSet;
}

void UpdateSurveyInputObject::unsetCountry()
{
    m_CountryIsSet = false;
}

}
}
}
}

