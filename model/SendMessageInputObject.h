/**
 * TextMagic API Documentation
 * # Overview ## Introduction         test <img style=\"float: right; margin-left: 10px; width: 100px;\" src=\"images/phone.png\"> TextMagic SMS API is a platform for building your own messaging app using our messaging infrastructure. It allows you to send and receive SMS text messages, query information about inbound and outbound messages, manage contacts, create templates (i.e. message formats and static texts) and schedule recurrent SMS messages as well as process bulk SMS messages. <button name=\"button\" onclick=\"http://www.google.com\" class=\"btn\">Try TextMagic API for Free</button>  ### Two Ways to Use TextMagic API * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’s messaging gateway features * [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/) – set up two-way SMS communication without the need to write any additional code  ### Code Libraries We have created a set of client libraries for the most popular programming languages (such as REST API Java and REST API PHP). These libraries allow you to integrate our API into your code in minutes. Just choose your preferred language to get started:  ## Getting started Get Started with the TextMagic REST API To start sending text messages using the TextMagic REST API, just follow these steps: 1. Generate the API credentials 1. Connect to our API endpoint This page provides all the information you need to get started. Here, we explain the following steps:  How to obtain the API credentials The API endpoint How the REST API works The next step How to obtain the API credentials  ### How to obtain the API credentials To start sending text messages, you need to create an API key. API keys are similar to an account password; the difference is that an API key only provides access to the API: you cannot log in to TextMagic Online using the API key.  Your program sends the login credentials with each API request as HTTP headers: `X-TM-Username` is your TextMagic username, while `X-TM-Key` is your API key.  How to obtain an API key:  1. Log in to TextMagic (or start a free trial if you haven’t registered yet). 1. Go to the API settings page. 1. Click the Add new API key button. 1. Enter an app name for this key. Note, it’s just a label, so pick any name. 1. Click Generate new key. 1. You should now see your new API key in the green notification banner above the table:  ![alt text](images/credentials.png)  > Note for API v1 users > V1 keys are not compatible with the V2 version of the TextMagic REST API, so you will need to generate a new API key to use the V2 endpoint.  ### The API endpoint The TextMagic REST API endpoint is: ``` https://rest.textmagic.com/api/v2 ``` All the URLs referenced in this documentation should use this base URL.  ### How the REST API works REST APIs use the HTTP protocol to send and receive messages. REST messages are usually encoded as JSON documents and are an improvement over older methods such as the XML based SOAP protocol. REST APIs use the same set of methods that web browsers use: POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read, update and delete. Often, REST URIs provide direct CRUD access to entities or collections of entities, for example: http://api.foo.com/people. In this instance, to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}. REST makes these types of operations simple.  > Example > > Let’s take the entity most often used in messaging: contacts. Imagine you want to perform operations on your contacts list: well, it’s only a matter of calling the following endpoints: > * GET /api/v2/contacts (get all of your contacts) > * GET /api/v2/contacts/{id} (get a specific contact) > * POST /api/v2/contacts (create a new contact) > * PUT /api/v2/contacts/{id} (update an existing contact) > * DELETE /api/v2/contacts/{id} (delete an existing contact) It’s that simple! In fact, that’s all you need to do to manage the contacts in your TextMagic account!  ## Sandbox Sandbox is a tool to test TextMagic REST API requests without the need to install any applications or write any code. Here, we explain the following details about Sandbox: * The credentials area * Command documentation * How it works  <a href=\"\">Go to TextMagic Sandbox</a>  ### The credentials area To make requests using your TextMagic account, you need to enter your account username and your API key into the corresponding fields. You may also Save them in your browser or press Clear to erase them.  ![alt text](images/sandbox.png) 
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SendMessageInputObject.h
 *
 * 
 */

#ifndef COM_TEXTMAGIC_CLIENT_MODEL_SendMessageInputObject_H_
#define COM_TEXTMAGIC_CLIENT_MODEL_SendMessageInputObject_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace textmagic {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  SendMessageInputObject
    : public ModelBase
{
public:
    SendMessageInputObject();
    virtual ~SendMessageInputObject();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SendMessageInputObject members

    /// <summary>
    /// Message text. Required if template_id is not set
    /// </summary>
    utility::string_t getText() const;
    bool textIsSet() const;
    void unsetText();
    void setText(utility::string_t value);
    /// <summary>
    /// Template used instead of message text. Required if text is not set
    /// </summary>
    int32_t getTemplateId() const;
    bool templateIdIsSet() const;
    void unsetTemplateId();
    void setTemplateId(int32_t value);
    /// <summary>
    /// DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now
    /// </summary>
    int32_t getSendingTime() const;
    bool sendingTimeIsSet() const;
    void unsetSendingTime();
    void setSendingTime(int32_t value);
    /// <summary>
    /// Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone
    /// </summary>
    utility::string_t getSendingDateTime() const;
    bool sendingDateTimeIsSet() const;
    void unsetSendingDateTime();
    void setSendingDateTime(utility::string_t value);
    /// <summary>
    /// ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone
    /// </summary>
    utility::string_t getSendingTimezone() const;
    bool sendingTimezoneIsSet() const;
    void unsetSendingTimezone();
    void setSendingTimezone(utility::string_t value);
    /// <summary>
    /// Comma separated array of contact resources id message will be sent to
    /// </summary>
    utility::string_t getContacts() const;
    bool contactsIsSet() const;
    void unsetContacts();
    void setContacts(utility::string_t value);
    /// <summary>
    /// Comma separated array of list resources id message will be sent to
    /// </summary>
    utility::string_t getLists() const;
    bool listsIsSet() const;
    void unsetLists();
    void setLists(utility::string_t value);
    /// <summary>
    /// Comma separated array of E.164 phone numbers message will be sent to
    /// </summary>
    utility::string_t getPhones() const;
    bool phonesIsSet() const;
    void unsetPhones();
    void setPhones(utility::string_t value);
    /// <summary>
    /// Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is false
    /// </summary>
    bool isCutExtra() const;
    bool cutExtraIsSet() const;
    void unsetCutExtra();
    void setCutExtra(bool value);
    /// <summary>
    /// Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6
    /// </summary>
    int32_t getPartsCount() const;
    bool partsCountIsSet() const;
    void unsetPartsCount();
    void setPartsCount(int32_t value);
    /// <summary>
    /// Custom message reference id which can be used in your application infrastructure
    /// </summary>
    int32_t getReferenceId() const;
    bool referenceIdIsSet() const;
    void unsetReferenceId();
    void setReferenceId(int32_t value);
    /// <summary>
    /// One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery
    /// </summary>
    utility::string_t getFrom() const;
    bool fromIsSet() const;
    void unsetFrom();
    void setFrom(utility::string_t value);
    /// <summary>
    /// iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details
    /// </summary>
    utility::string_t getRule() const;
    bool ruleIsSet() const;
    void unsetRule();
    void setRule(utility::string_t value);
    /// <summary>
    /// Should sending method try to create new Chat(if not exist) with specified recipients. Default is false
    /// </summary>
    bool isCreateChat() const;
    bool createChatIsSet() const;
    void unsetCreateChat();
    void setCreateChat(bool value);
    /// <summary>
    /// Send Text to Speech message. Default is false
    /// </summary>
    bool isTts() const;
    bool ttsIsSet() const;
    void unsetTts();
    void setTts(bool value);
    /// <summary>
    /// Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is false
    /// </summary>
    bool isLocal() const;
    bool localIsSet() const;
    void unsetLocal();
    void setLocal(bool value);
    /// <summary>
    /// 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country
    /// </summary>
    utility::string_t getLocalCountry() const;
    bool localCountryIsSet() const;
    void unsetLocalCountry();
    void setLocalCountry(utility::string_t value);

protected:
    utility::string_t m_Text;
    bool m_TextIsSet;
    int32_t m_TemplateId;
    bool m_TemplateIdIsSet;
    int32_t m_SendingTime;
    bool m_SendingTimeIsSet;
    utility::string_t m_SendingDateTime;
    bool m_SendingDateTimeIsSet;
    utility::string_t m_SendingTimezone;
    bool m_SendingTimezoneIsSet;
    utility::string_t m_Contacts;
    bool m_ContactsIsSet;
    utility::string_t m_Lists;
    bool m_ListsIsSet;
    utility::string_t m_Phones;
    bool m_PhonesIsSet;
    bool m_CutExtra;
    bool m_CutExtraIsSet;
    int32_t m_PartsCount;
    bool m_PartsCountIsSet;
    int32_t m_ReferenceId;
    bool m_ReferenceIdIsSet;
    utility::string_t m_From;
    bool m_FromIsSet;
    utility::string_t m_Rule;
    bool m_RuleIsSet;
    bool m_CreateChat;
    bool m_CreateChatIsSet;
    bool m_Tts;
    bool m_TtsIsSet;
    bool m_Local;
    bool m_LocalIsSet;
    utility::string_t m_LocalCountry;
    bool m_LocalCountryIsSet;
};

}
}
}
}

#endif /* COM_TEXTMAGIC_CLIENT_MODEL_SendMessageInputObject_H_ */
