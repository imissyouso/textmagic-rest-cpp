/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ForwardedCall.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

ForwardedCall::ForwardedCall()
{
    m_Id = 0;
    m_CallTime = utility::datetime();
    m_Caller = utility::conversions::to_string_t("");
    m_Via = utility::conversions::to_string_t("");
    m_Receiver = utility::conversions::to_string_t("");
}

ForwardedCall::~ForwardedCall()
{
}

void ForwardedCall::validate()
{
    // TODO: implement validation
}

web::json::value ForwardedCall::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("callTime")] = ModelBase::toJson(m_CallTime);
    val[utility::conversions::to_string_t("caller")] = ModelBase::toJson(m_Caller);
    val[utility::conversions::to_string_t("via")] = ModelBase::toJson(m_Via);
    val[utility::conversions::to_string_t("receiver")] = ModelBase::toJson(m_Receiver);

    return val;
}

void ForwardedCall::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("callTime")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("callTime")];
        if(!fieldValue.is_null())
        {
            setCallTime(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("caller")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("caller")];
        if(!fieldValue.is_null())
        {
            setCaller(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("via")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("via")];
        if(!fieldValue.is_null())
        {
            setVia(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("receiver")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("receiver")];
        if(!fieldValue.is_null())
        {
            setReceiver(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void ForwardedCall::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("callTime"), m_CallTime));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("caller"), m_Caller));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("via"), m_Via));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("receiver"), m_Receiver));
}

void ForwardedCall::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setCallTime(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("callTime"))));
    setCaller(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("caller"))));
    setVia(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("via"))));
    setReceiver(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("receiver"))));
}

int32_t ForwardedCall::getId() const
{
    return m_Id;
}


void ForwardedCall::setId(int32_t value)
{
    m_Id = value;
    
}
utility::datetime ForwardedCall::getCallTime() const
{
    return m_CallTime;
}


void ForwardedCall::setCallTime(utility::datetime value)
{
    m_CallTime = value;
    
}
utility::string_t ForwardedCall::getCaller() const
{
    return m_Caller;
}


void ForwardedCall::setCaller(utility::string_t value)
{
    m_Caller = value;
    
}
utility::string_t ForwardedCall::getVia() const
{
    return m_Via;
}


void ForwardedCall::setVia(utility::string_t value)
{
    m_Via = value;
    
}
utility::string_t ForwardedCall::getReceiver() const
{
    return m_Receiver;
}


void ForwardedCall::setReceiver(utility::string_t value)
{
    m_Receiver = value;
    
}
}
}
}
}

