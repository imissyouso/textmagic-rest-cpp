/**
 * TextMagic API Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "DoAuthInputObject.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

DoAuthInputObject::DoAuthInputObject()
{
    m_Username = utility::conversions::to_string_t("");
    m_Password = utility::conversions::to_string_t("");
    m_AppName = utility::conversions::to_string_t("");
    m_AppNameIsSet = false;
    m_AppVersion = utility::conversions::to_string_t("");
    m_AppVersionIsSet = false;
    m_DeviceId = utility::conversions::to_string_t("");
    m_DeviceIdIsSet = false;
    m_PushServiceType = utility::conversions::to_string_t("");
    m_PushServiceTypeIsSet = false;
    m_TfaCode = utility::conversions::to_string_t("");
    m_TfaCodeIsSet = false;
    m_TfaId = utility::conversions::to_string_t("");
    m_TfaIdIsSet = false;
}

DoAuthInputObject::~DoAuthInputObject()
{
}

void DoAuthInputObject::validate()
{
    // TODO: implement validation
}

web::json::value DoAuthInputObject::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("username")] = ModelBase::toJson(m_Username);
    val[utility::conversions::to_string_t("password")] = ModelBase::toJson(m_Password);
    if(m_AppNameIsSet)
    {
        val[utility::conversions::to_string_t("appName")] = ModelBase::toJson(m_AppName);
    }
    if(m_AppVersionIsSet)
    {
        val[utility::conversions::to_string_t("appVersion")] = ModelBase::toJson(m_AppVersion);
    }
    if(m_DeviceIdIsSet)
    {
        val[utility::conversions::to_string_t("deviceId")] = ModelBase::toJson(m_DeviceId);
    }
    if(m_PushServiceTypeIsSet)
    {
        val[utility::conversions::to_string_t("pushServiceType")] = ModelBase::toJson(m_PushServiceType);
    }
    if(m_TfaCodeIsSet)
    {
        val[utility::conversions::to_string_t("tfaCode")] = ModelBase::toJson(m_TfaCode);
    }
    if(m_TfaIdIsSet)
    {
        val[utility::conversions::to_string_t("tfaId")] = ModelBase::toJson(m_TfaId);
    }

    return val;
}

void DoAuthInputObject::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("username")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("username")];
        if(!fieldValue.is_null())
        {
            setUsername(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("password")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("password")];
        if(!fieldValue.is_null())
        {
            setPassword(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("appName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("appName")];
        if(!fieldValue.is_null())
        {
            setAppName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("appVersion")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("appVersion")];
        if(!fieldValue.is_null())
        {
            setAppVersion(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deviceId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("deviceId")];
        if(!fieldValue.is_null())
        {
            setDeviceId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pushServiceType")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("pushServiceType")];
        if(!fieldValue.is_null())
        {
            setPushServiceType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tfaCode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tfaCode")];
        if(!fieldValue.is_null())
        {
            setTfaCode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tfaId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tfaId")];
        if(!fieldValue.is_null())
        {
            setTfaId(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void DoAuthInputObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("username"), m_Username));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("password"), m_Password));
    if(m_AppNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("appName"), m_AppName));
        
    }
    if(m_AppVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("appVersion"), m_AppVersion));
        
    }
    if(m_DeviceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deviceId"), m_DeviceId));
        
    }
    if(m_PushServiceTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pushServiceType"), m_PushServiceType));
        
    }
    if(m_TfaCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tfaCode"), m_TfaCode));
        
    }
    if(m_TfaIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tfaId"), m_TfaId));
        
    }
}

void DoAuthInputObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setUsername(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("username"))));
    setPassword(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("password"))));
    if(multipart->hasContent(utility::conversions::to_string_t("appName")))
    {
        setAppName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("appName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("appVersion")))
    {
        setAppVersion(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("appVersion"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deviceId")))
    {
        setDeviceId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("deviceId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pushServiceType")))
    {
        setPushServiceType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("pushServiceType"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tfaCode")))
    {
        setTfaCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tfaCode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tfaId")))
    {
        setTfaId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tfaId"))));
    }
}

utility::string_t DoAuthInputObject::getUsername() const
{
    return m_Username;
}


void DoAuthInputObject::setUsername(utility::string_t value)
{
    m_Username = value;
    
}
utility::string_t DoAuthInputObject::getPassword() const
{
    return m_Password;
}


void DoAuthInputObject::setPassword(utility::string_t value)
{
    m_Password = value;
    
}
utility::string_t DoAuthInputObject::getAppName() const
{
    return m_AppName;
}


void DoAuthInputObject::setAppName(utility::string_t value)
{
    m_AppName = value;
    m_AppNameIsSet = true;
}
bool DoAuthInputObject::appNameIsSet() const
{
    return m_AppNameIsSet;
}

void DoAuthInputObject::unsetAppName()
{
    m_AppNameIsSet = false;
}

utility::string_t DoAuthInputObject::getAppVersion() const
{
    return m_AppVersion;
}


void DoAuthInputObject::setAppVersion(utility::string_t value)
{
    m_AppVersion = value;
    m_AppVersionIsSet = true;
}
bool DoAuthInputObject::appVersionIsSet() const
{
    return m_AppVersionIsSet;
}

void DoAuthInputObject::unsetAppVersion()
{
    m_AppVersionIsSet = false;
}

utility::string_t DoAuthInputObject::getDeviceId() const
{
    return m_DeviceId;
}


void DoAuthInputObject::setDeviceId(utility::string_t value)
{
    m_DeviceId = value;
    m_DeviceIdIsSet = true;
}
bool DoAuthInputObject::deviceIdIsSet() const
{
    return m_DeviceIdIsSet;
}

void DoAuthInputObject::unsetDeviceId()
{
    m_DeviceIdIsSet = false;
}

utility::string_t DoAuthInputObject::getPushServiceType() const
{
    return m_PushServiceType;
}


void DoAuthInputObject::setPushServiceType(utility::string_t value)
{
    m_PushServiceType = value;
    m_PushServiceTypeIsSet = true;
}
bool DoAuthInputObject::pushServiceTypeIsSet() const
{
    return m_PushServiceTypeIsSet;
}

void DoAuthInputObject::unsetPushServiceType()
{
    m_PushServiceTypeIsSet = false;
}

utility::string_t DoAuthInputObject::getTfaCode() const
{
    return m_TfaCode;
}


void DoAuthInputObject::setTfaCode(utility::string_t value)
{
    m_TfaCode = value;
    m_TfaCodeIsSet = true;
}
bool DoAuthInputObject::tfaCodeIsSet() const
{
    return m_TfaCodeIsSet;
}

void DoAuthInputObject::unsetTfaCode()
{
    m_TfaCodeIsSet = false;
}

utility::string_t DoAuthInputObject::getTfaId() const
{
    return m_TfaId;
}


void DoAuthInputObject::setTfaId(utility::string_t value)
{
    m_TfaId = value;
    m_TfaIdIsSet = true;
}
bool DoAuthInputObject::tfaIdIsSet() const
{
    return m_TfaIdIsSet;
}

void DoAuthInputObject::unsetTfaId()
{
    m_TfaIdIsSet = false;
}

}
}
}
}

