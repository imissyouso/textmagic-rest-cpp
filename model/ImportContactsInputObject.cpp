/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ImportContactsInputObject.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

ImportContactsInputObject::ImportContactsInputObject()
{
    m_ListName = utility::conversions::to_string_t("");
    m_ListNameIsSet = false;
    m_ListId = utility::conversions::to_string_t("");
    m_ListIdIsSet = false;
}

ImportContactsInputObject::~ImportContactsInputObject()
{
}

void ImportContactsInputObject::validate()
{
    // TODO: implement validation
}

web::json::value ImportContactsInputObject::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Column )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("column")] = web::json::value::array(jsonArray);
    }
    if(m_ListNameIsSet)
    {
        val[utility::conversions::to_string_t("listName")] = ModelBase::toJson(m_ListName);
    }
    if(m_ListIdIsSet)
    {
        val[utility::conversions::to_string_t("listId")] = ModelBase::toJson(m_ListId);
    }

    return val;
}

void ImportContactsInputObject::fromJson(web::json::value& val)
{
    {
        m_Column.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("column")))
        {
        for( auto& item : val[utility::conversions::to_string_t("column")].as_array() )
        {
            if(item.is_null())
            {
                m_Column.push_back( std::shared_ptr<ImportColumnMappingItem>(nullptr) );
            }
            else
            {
                std::shared_ptr<ImportColumnMappingItem> newItem(new ImportColumnMappingItem());
                newItem->fromJson(item);
                m_Column.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("listName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("listName")];
        if(!fieldValue.is_null())
        {
            setListName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("listId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("listId")];
        if(!fieldValue.is_null())
        {
            setListId(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void ImportContactsInputObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Column )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("column"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
    if(m_ListNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("listName"), m_ListName));
        
    }
    if(m_ListIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("listId"), m_ListId));
        
    }
}

void ImportContactsInputObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        m_Column.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("column"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Column.push_back( std::shared_ptr<ImportColumnMappingItem>(nullptr) );
            }
            else
            {
                std::shared_ptr<ImportColumnMappingItem> newItem(new ImportColumnMappingItem());
                newItem->fromJson(item);
                m_Column.push_back( newItem );
            }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("listName")))
    {
        setListName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("listName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("listId")))
    {
        setListId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("listId"))));
    }
}

std::vector<std::shared_ptr<ImportColumnMappingItem>>& ImportContactsInputObject::getColumn()
{
    return m_Column;
}

void ImportContactsInputObject::setColumn(std::vector<std::shared_ptr<ImportColumnMappingItem>> value)
{
    m_Column = value;
    
}
utility::string_t ImportContactsInputObject::getListName() const
{
    return m_ListName;
}


void ImportContactsInputObject::setListName(utility::string_t value)
{
    m_ListName = value;
    m_ListNameIsSet = true;
}
bool ImportContactsInputObject::listNameIsSet() const
{
    return m_ListNameIsSet;
}

void ImportContactsInputObject::unsetListName()
{
    m_ListNameIsSet = false;
}

utility::string_t ImportContactsInputObject::getListId() const
{
    return m_ListId;
}


void ImportContactsInputObject::setListId(utility::string_t value)
{
    m_ListId = value;
    m_ListIdIsSet = true;
}
bool ImportContactsInputObject::listIdIsSet() const
{
    return m_ListIdIsSet;
}

void ImportContactsInputObject::unsetListId()
{
    m_ListIdIsSet = false;
}

}
}
}
}

