/**
 * TextMagic API Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UpdatePasswordInputObject.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

UpdatePasswordInputObject::UpdatePasswordInputObject()
{
    m_OldPassword = utility::conversions::to_string_t("");
    m_NewPassword = utility::conversions::to_string_t("");
}

UpdatePasswordInputObject::~UpdatePasswordInputObject()
{
}

void UpdatePasswordInputObject::validate()
{
    // TODO: implement validation
}

web::json::value UpdatePasswordInputObject::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("oldPassword")] = ModelBase::toJson(m_OldPassword);
    val[utility::conversions::to_string_t("newPassword")] = ModelBase::toJson(m_NewPassword);

    return val;
}

void UpdatePasswordInputObject::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("oldPassword")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("oldPassword")];
        if(!fieldValue.is_null())
        {
            setOldPassword(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newPassword")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("newPassword")];
        if(!fieldValue.is_null())
        {
            setNewPassword(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void UpdatePasswordInputObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("oldPassword"), m_OldPassword));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newPassword"), m_NewPassword));
}

void UpdatePasswordInputObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setOldPassword(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("oldPassword"))));
    setNewPassword(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newPassword"))));
}

utility::string_t UpdatePasswordInputObject::getOldPassword() const
{
    return m_OldPassword;
}


void UpdatePasswordInputObject::setOldPassword(utility::string_t value)
{
    m_OldPassword = value;
    
}
utility::string_t UpdatePasswordInputObject::getNewPassword() const
{
    return m_NewPassword;
}


void UpdatePasswordInputObject::setNewPassword(utility::string_t value)
{
    m_NewPassword = value;
    
}
}
}
}
}

