/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ImportColumnMappingItem.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

ImportColumnMappingItem::ImportColumnMappingItem()
{
    m_Column_position_in_file = utility::conversions::to_string_t("");
    m_Column_position_in_fileIsSet = false;
    m_Field_or_custom_field_id = utility::conversions::to_string_t("");
    m_Field_or_custom_field_idIsSet = false;
}

ImportColumnMappingItem::~ImportColumnMappingItem()
{
}

void ImportColumnMappingItem::validate()
{
    // TODO: implement validation
}

web::json::value ImportColumnMappingItem::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Column_position_in_fileIsSet)
    {
        val[utility::conversions::to_string_t("column_position_in_file")] = ModelBase::toJson(m_Column_position_in_file);
    }
    if(m_Field_or_custom_field_idIsSet)
    {
        val[utility::conversions::to_string_t("field_or_custom_field_id")] = ModelBase::toJson(m_Field_or_custom_field_id);
    }

    return val;
}

void ImportColumnMappingItem::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("column_position_in_file")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("column_position_in_file")];
        if(!fieldValue.is_null())
        {
            setColumnPositionInFile(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("field_or_custom_field_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("field_or_custom_field_id")];
        if(!fieldValue.is_null())
        {
            setFieldOrCustomFieldId(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void ImportColumnMappingItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Column_position_in_fileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("column_position_in_file"), m_Column_position_in_file));
        
    }
    if(m_Field_or_custom_field_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("field_or_custom_field_id"), m_Field_or_custom_field_id));
        
    }
}

void ImportColumnMappingItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("column_position_in_file")))
    {
        setColumnPositionInFile(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("column_position_in_file"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("field_or_custom_field_id")))
    {
        setFieldOrCustomFieldId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("field_or_custom_field_id"))));
    }
}

utility::string_t ImportColumnMappingItem::getColumnPositionInFile() const
{
    return m_Column_position_in_file;
}


void ImportColumnMappingItem::setColumnPositionInFile(utility::string_t value)
{
    m_Column_position_in_file = value;
    m_Column_position_in_fileIsSet = true;
}
bool ImportColumnMappingItem::columnPositionInFileIsSet() const
{
    return m_Column_position_in_fileIsSet;
}

void ImportColumnMappingItem::unsetColumn_position_in_file()
{
    m_Column_position_in_fileIsSet = false;
}

utility::string_t ImportColumnMappingItem::getFieldOrCustomFieldId() const
{
    return m_Field_or_custom_field_id;
}


void ImportColumnMappingItem::setFieldOrCustomFieldId(utility::string_t value)
{
    m_Field_or_custom_field_id = value;
    m_Field_or_custom_field_idIsSet = true;
}
bool ImportColumnMappingItem::fieldOrCustomFieldIdIsSet() const
{
    return m_Field_or_custom_field_idIsSet;
}

void ImportColumnMappingItem::unsetField_or_custom_field_id()
{
    m_Field_or_custom_field_idIsSet = false;
}

}
}
}
}

